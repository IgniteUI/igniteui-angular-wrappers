"use strict";
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("@angular/core");
var i1 = require("./iglineargauge.component");
var styles_IgLinearGaugeComponent = [];
var RenderType_IgLinearGaugeComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_IgLinearGaugeComponent, data: {} });
exports.RenderType_IgLinearGaugeComponent = RenderType_IgLinearGaugeComponent;
function View_IgLinearGaugeComponent_0(_l) { return i0.ɵvid(0, [i0.ɵncd(null, 0)], null, null); }
exports.View_IgLinearGaugeComponent_0 = View_IgLinearGaugeComponent_0;
function View_IgLinearGaugeComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "ig-linear-gauge", [], null, null, null, View_IgLinearGaugeComponent_0, RenderType_IgLinearGaugeComponent)), i0.ɵdid(1, 1032192, null, 0, i1.IgLinearGaugeComponent, [i0.ElementRef, i0.Renderer, i0.IterableDiffers, i0.KeyValueDiffers, i0.ChangeDetectorRef], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }
exports.View_IgLinearGaugeComponent_Host_0 = View_IgLinearGaugeComponent_Host_0;
var IgLinearGaugeComponentNgFactory = i0.ɵccf("ig-linear-gauge", i1.IgLinearGaugeComponent, View_IgLinearGaugeComponent_Host_0, { widgetId: "widgetId", changeDetectionInterval: "changeDetectionInterval", disabled: "disabled", create: "create", width: "width", height: "height", ranges: "ranges", rangeToolTipTemplate: "rangeToolTipTemplate", needleToolTipTemplate: "needleToolTipTemplate", orientation: "orientation", rangeBrushes: "rangeBrushes", rangeOutlines: "rangeOutlines", minimumValue: "minimumValue", maximumValue: "maximumValue", value: "value", needleShape: "needleShape", needleName: "needleName", rangeInnerExtent: "rangeInnerExtent", scaleInnerExtent: "scaleInnerExtent", rangeOuterExtent: "rangeOuterExtent", scaleOuterExtent: "scaleOuterExtent", needleInnerExtent: "needleInnerExtent", needleOuterExtent: "needleOuterExtent", needleInnerBaseWidth: "needleInnerBaseWidth", needleOuterBaseWidth: "needleOuterBaseWidth", needleInnerPointWidth: "needleInnerPointWidth", needleOuterPointWidth: "needleOuterPointWidth", needleInnerPointExtent: "needleInnerPointExtent", needleOuterPointExtent: "needleOuterPointExtent", interval: "interval", ticksPostInitial: "ticksPostInitial", ticksPreTerminal: "ticksPreTerminal", labelInterval: "labelInterval", labelExtent: "labelExtent", labelsPostInitial: "labelsPostInitial", labelsPreTerminal: "labelsPreTerminal", minorTickCount: "minorTickCount", tickStartExtent: "tickStartExtent", tickEndExtent: "tickEndExtent", tickStrokeThickness: "tickStrokeThickness", tickBrush: "tickBrush", fontBrush: "fontBrush", needleBreadth: "needleBreadth", needleBrush: "needleBrush", needleOutline: "needleOutline", needleStrokeThickness: "needleStrokeThickness", minorTickStartExtent: "minorTickStartExtent", minorTickEndExtent: "minorTickEndExtent", minorTickStrokeThickness: "minorTickStrokeThickness", minorTickBrush: "minorTickBrush", isScaleInverted: "isScaleInverted", backingBrush: "backingBrush", backingOutline: "backingOutline", backingStrokeThickness: "backingStrokeThickness", backingInnerExtent: "backingInnerExtent", backingOuterExtent: "backingOuterExtent", scaleStartExtent: "scaleStartExtent", scaleEndExtent: "scaleEndExtent", scaleBrush: "scaleBrush", scaleOutline: "scaleOutline", scaleStrokeThickness: "scaleStrokeThickness", isNeedleDraggingEnabled: "isNeedleDraggingEnabled", transitionDuration: "transitionDuration", showToolTipTimeout: "showToolTipTimeout", showToolTip: "showToolTip", font: "font", pixelScalingRatio: "pixelScalingRatio", options: "options" }, { formatLabel: "formatLabel", alignLabel: "alignLabel", valueChanged: "valueChanged" }, ["*"]);
exports.IgLinearGaugeComponentNgFactory = IgLinearGaugeComponentNgFactory;
//# sourceMappingURL=iglineargauge.component.ngfactory.js.map