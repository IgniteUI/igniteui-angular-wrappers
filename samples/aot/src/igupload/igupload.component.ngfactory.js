"use strict";
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("@angular/core");
var i1 = require("./igupload.component");
var styles_IgUploadComponent = [];
var RenderType_IgUploadComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_IgUploadComponent, data: {} });
exports.RenderType_IgUploadComponent = RenderType_IgUploadComponent;
function View_IgUploadComponent_0(_l) { return i0.ɵvid(0, [i0.ɵncd(null, 0)], null, null); }
exports.View_IgUploadComponent_0 = View_IgUploadComponent_0;
function View_IgUploadComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "ig-upload", [], null, null, null, View_IgUploadComponent_0, RenderType_IgUploadComponent)), i0.ɵdid(1, 1032192, null, 0, i1.IgUploadComponent, [i0.ElementRef, i0.Renderer, i0.IterableDiffers, i0.KeyValueDiffers, i0.ChangeDetectorRef], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }
exports.View_IgUploadComponent_Host_0 = View_IgUploadComponent_Host_0;
var IgUploadComponentNgFactory = i0.ɵccf("ig-upload", i1.IgUploadComponent, View_IgUploadComponent_Host_0, { widgetId: "widgetId", changeDetectionInterval: "changeDetectionInterval", disabled: "disabled", create: "create", width: "width", height: "height", autostartupload: "autostartupload", labelUploadButton: "labelUploadButton", labelAddButton: "labelAddButton", labelClearAllButton: "labelClearAllButton", labelSummaryTemplate: "labelSummaryTemplate", labelSummaryProgressBarTemplate: "labelSummaryProgressBarTemplate", labelShowDetails: "labelShowDetails", labelHideDetails: "labelHideDetails", labelSummaryProgressButtonCancel: "labelSummaryProgressButtonCancel", labelSummaryProgressButtonContinue: "labelSummaryProgressButtonContinue", labelSummaryProgressButtonDone: "labelSummaryProgressButtonDone", labelProgressBarFileNameContinue: "labelProgressBarFileNameContinue", errorMessageMaxFileSizeExceeded: "errorMessageMaxFileSizeExceeded", errorMessageGetFileStatus: "errorMessageGetFileStatus", errorMessageCancelUpload: "errorMessageCancelUpload", errorMessageNoSuchFile: "errorMessageNoSuchFile", errorMessageOther: "errorMessageOther", errorMessageValidatingFileExtension: "errorMessageValidatingFileExtension", errorMessageAJAXRequestFileSize: "errorMessageAJAXRequestFileSize", errorMessageTryToRemoveNonExistingFile: "errorMessageTryToRemoveNonExistingFile", errorMessageTryToStartNonExistingFile: "errorMessageTryToStartNonExistingFile", errorMessageMaxUploadedFiles: "errorMessageMaxUploadedFiles", errorMessageMaxSimultaneousFiles: "errorMessageMaxSimultaneousFiles", errorMessageDropMultipleFilesWhenSingleModel: "errorMessageDropMultipleFilesWhenSingleModel", uploadUrl: "uploadUrl", progressUrl: "progressUrl", allowedExtensions: "allowedExtensions", showFileExtensionIcon: "showFileExtensionIcon", css: "css", fileExtensionIcons: "fileExtensionIcons", mode: "mode", multipleFiles: "multipleFiles", maxUploadedFiles: "maxUploadedFiles", maxSimultaneousFilesUploads: "maxSimultaneousFilesUploads", fileSizeMetric: "fileSizeMetric", controlId: "controlId", fileSizeDecimalDisplay: "fileSizeDecimalDisplay", maxFileSize: "maxFileSize", options: "options" }, { fileSelecting: "fileSelecting", fileSelected: "fileSelected", fileUploading: "fileUploading", fileUploaded: "fileUploaded", fileUploadAborted: "fileUploadAborted", cancelAllClicked: "cancelAllClicked", onError: "onError", fileExtensionsValidating: "fileExtensionsValidating", onXHRLoad: "onXHRLoad", onFormDataSubmit: "onFormDataSubmit" }, ["*"]);
exports.IgUploadComponentNgFactory = IgUploadComponentNgFactory;
//# sourceMappingURL=igupload.component.ngfactory.js.map