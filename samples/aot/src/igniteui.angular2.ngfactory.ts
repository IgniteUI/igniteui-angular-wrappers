/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
 /* tslint:disable */


import * as import0 from '@angular/core';
import * as import1 from '../../../src/igniteui.angular2';
import * as import2 from '@angular/forms';
class IgniteUIModuleInjector extends import0.ɵNgModuleInjector<import1.IgniteUIModule> {
  _IgniteUIModule_0:import1.IgniteUIModule;
  constructor(parent:import0.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.IgniteUIModule {
    this._IgniteUIModule_0 = new import1.IgniteUIModule();
    return this._IgniteUIModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.IgniteUIModule)) { return this._IgniteUIModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const IgniteUIModuleNgFactory:import0.NgModuleFactory<import1.IgniteUIModule> = new import0.NgModuleFactory<any>(IgniteUIModuleInjector,import1.IgniteUIModule);
const styles_IgGridComponent:any[] = ([] as any[]);
export const RenderType_IgGridComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgGridComponent,
  data: {}
}
);
export function View_IgGridComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgGridComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),3,'ig-grid',([] as any[]),(null as any),(null as any),(null as any),View_IgGridComponent_0,RenderType_IgGridComponent)),
    import0.ɵdid(712704,(null as any),2,import1.IgGridComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any)),
    import0.ɵqud(301989888,1,{_columns: 1}),
    import0.ɵqud(167772160,2,{featuresList: 0})
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgGridComponentNgFactory:import0.ComponentFactory<import1.IgGridComponent> = import0.ɵccf('ig-grid',import1.IgGridComponent,View_IgGridComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  autoAdjustHeight: 'autoAdjustHeight',
  avgRowHeight: 'avgRowHeight',
  avgColumnWidth: 'avgColumnWidth',
  defaultColumnWidth: 'defaultColumnWidth',
  autoGenerateColumns: 'autoGenerateColumns',
  virtualization: 'virtualization',
  virtualizationMode: 'virtualizationMode',
  requiresDataBinding: 'requiresDataBinding',
  rowVirtualization: 'rowVirtualization',
  columnVirtualization: 'columnVirtualization',
  virtualizationMouseWheelStep: 'virtualizationMouseWheelStep',
  adjustVirtualHeights: 'adjustVirtualHeights',
  templatingEngine: 'templatingEngine',
  columns: 'columns',
  dataSource: 'dataSource',
  dataSourceUrl: 'dataSourceUrl',
  dataSourceType: 'dataSourceType',
  responseDataKey: 'responseDataKey',
  responseTotalRecCountKey: 'responseTotalRecCountKey',
  requestType: 'requestType',
  responseContentType: 'responseContentType',
  showHeader: 'showHeader',
  showFooter: 'showFooter',
  fixedHeaders: 'fixedHeaders',
  fixedFooters: 'fixedFooters',
  caption: 'caption',
  features: 'features',
  tabIndex: 'tabIndex',
  localSchemaTransform: 'localSchemaTransform',
  primaryKey: 'primaryKey',
  serializeTransactionLog: 'serializeTransactionLog',
  autoCommit: 'autoCommit',
  aggregateTransactions: 'aggregateTransactions',
  autoFormat: 'autoFormat',
  renderCheckboxes: 'renderCheckboxes',
  updateUrl: 'updateUrl',
  restSettings: 'restSettings',
  alternateRowStyles: 'alternateRowStyles',
  autofitLastColumn: 'autofitLastColumn',
  enableHoverStyles: 'enableHoverStyles',
  enableUTCDates: 'enableUTCDates',
  mergeUnboundColumns: 'mergeUnboundColumns',
  jsonpRequest: 'jsonpRequest',
  enableResizeContainerCheck: 'enableResizeContainerCheck',
  featureChooserIconDisplay: 'featureChooserIconDisplay',
  scrollSettings: 'scrollSettings'
}
,{
  cellClick: 'cellClick',
  cellRightClick: 'cellRightClick',
  dataBinding: 'dataBinding',
  dataBound: 'dataBound',
  rendering: 'rendering',
  rendered: 'rendered',
  dataRendering: 'dataRendering',
  dataRendered: 'dataRendered',
  headerRendering: 'headerRendering',
  headerRendered: 'headerRendered',
  footerRendering: 'footerRendering',
  footerRendered: 'footerRendered',
  headerCellRendered: 'headerCellRendered',
  rowsRendering: 'rowsRendering',
  rowsRendered: 'rowsRendered',
  schemaGenerated: 'schemaGenerated',
  columnsCollectionModified: 'columnsCollectionModified',
  requestError: 'requestError',
  created: 'created',
  destroyed: 'destroyed'
}
,['*']);
const styles_IgTreeGridComponent:any[] = ([] as any[]);
export const RenderType_IgTreeGridComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgTreeGridComponent,
  data: {}
}
);
export function View_IgTreeGridComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgTreeGridComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),3,'ig-tree-grid',([] as any[]),(null as any),(null as any),(null as any),View_IgTreeGridComponent_0,RenderType_IgTreeGridComponent)),
    import0.ɵdid(712704,(null as any),2,import1.IgTreeGridComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any)),
    import0.ɵqud(301989888,1,{_columns: 1}),
    import0.ɵqud(167772160,2,{featuresList: 0})
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgTreeGridComponentNgFactory:import0.ComponentFactory<import1.IgTreeGridComponent> = import0.ɵccf('ig-tree-grid',import1.IgTreeGridComponent,View_IgTreeGridComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  autoAdjustHeight: 'autoAdjustHeight',
  avgRowHeight: 'avgRowHeight',
  avgColumnWidth: 'avgColumnWidth',
  defaultColumnWidth: 'defaultColumnWidth',
  autoGenerateColumns: 'autoGenerateColumns',
  virtualization: 'virtualization',
  virtualizationMode: 'virtualizationMode',
  requiresDataBinding: 'requiresDataBinding',
  rowVirtualization: 'rowVirtualization',
  columnVirtualization: 'columnVirtualization',
  virtualizationMouseWheelStep: 'virtualizationMouseWheelStep',
  adjustVirtualHeights: 'adjustVirtualHeights',
  templatingEngine: 'templatingEngine',
  columns: 'columns',
  dataSource: 'dataSource',
  dataSourceUrl: 'dataSourceUrl',
  dataSourceType: 'dataSourceType',
  responseDataKey: 'responseDataKey',
  responseTotalRecCountKey: 'responseTotalRecCountKey',
  requestType: 'requestType',
  responseContentType: 'responseContentType',
  showHeader: 'showHeader',
  showFooter: 'showFooter',
  fixedHeaders: 'fixedHeaders',
  fixedFooters: 'fixedFooters',
  caption: 'caption',
  features: 'features',
  tabIndex: 'tabIndex',
  localSchemaTransform: 'localSchemaTransform',
  primaryKey: 'primaryKey',
  serializeTransactionLog: 'serializeTransactionLog',
  autoCommit: 'autoCommit',
  aggregateTransactions: 'aggregateTransactions',
  autoFormat: 'autoFormat',
  renderCheckboxes: 'renderCheckboxes',
  updateUrl: 'updateUrl',
  restSettings: 'restSettings',
  alternateRowStyles: 'alternateRowStyles',
  autofitLastColumn: 'autofitLastColumn',
  enableHoverStyles: 'enableHoverStyles',
  enableUTCDates: 'enableUTCDates',
  mergeUnboundColumns: 'mergeUnboundColumns',
  jsonpRequest: 'jsonpRequest',
  enableResizeContainerCheck: 'enableResizeContainerCheck',
  featureChooserIconDisplay: 'featureChooserIconDisplay',
  scrollSettings: 'scrollSettings',
  indentation: 'indentation',
  initialIndentationLevel: 'initialIndentationLevel',
  showExpansionIndicator: 'showExpansionIndicator',
  expandTooltipText: 'expandTooltipText',
  collapseTooltipText: 'collapseTooltipText',
  foreignKey: 'foreignKey',
  initialExpandDepth: 'initialExpandDepth',
  foreignKeyRootValue: 'foreignKeyRootValue',
  renderExpansionIndicatorColumn: 'renderExpansionIndicatorColumn',
  renderFirstDataCellFunction: 'renderFirstDataCellFunction',
  childDataKey: 'childDataKey',
  renderExpansionCellFunction: 'renderExpansionCellFunction',
  enableRemoteLoadOnDemand: 'enableRemoteLoadOnDemand',
  dataSourceSettings: 'dataSourceSettings'
}
,{
  cellClick: 'cellClick',
  cellRightClick: 'cellRightClick',
  dataBinding: 'dataBinding',
  dataBound: 'dataBound',
  rendering: 'rendering',
  rendered: 'rendered',
  dataRendering: 'dataRendering',
  dataRendered: 'dataRendered',
  headerRendering: 'headerRendering',
  headerRendered: 'headerRendered',
  footerRendering: 'footerRendering',
  footerRendered: 'footerRendered',
  headerCellRendered: 'headerCellRendered',
  rowsRendering: 'rowsRendering',
  rowsRendered: 'rowsRendered',
  schemaGenerated: 'schemaGenerated',
  columnsCollectionModified: 'columnsCollectionModified',
  requestError: 'requestError',
  created: 'created',
  destroyed: 'destroyed',
  rowExpanding: 'rowExpanding',
  rowExpanded: 'rowExpanded',
  rowCollapsing: 'rowCollapsing',
  rowCollapsed: 'rowCollapsed'
}
,['*']);
const styles_IgHierarchicalGridComponent:any[] = ([] as any[]);
export const RenderType_IgHierarchicalGridComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgHierarchicalGridComponent,
  data: {}
}
);
export function View_IgHierarchicalGridComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgHierarchicalGridComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),3,'ig-hierarchical-grid',([] as any[]),(null as any),(null as any),(null as any),View_IgHierarchicalGridComponent_0,RenderType_IgHierarchicalGridComponent)),
    import0.ɵdid(712704,(null as any),2,import1.IgHierarchicalGridComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any)),
    import0.ɵqud(301989888,1,{_columns: 1}),
    import0.ɵqud(167772160,2,{featuresList: 0})
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgHierarchicalGridComponentNgFactory:import0.ComponentFactory<import1.IgHierarchicalGridComponent> = import0.ɵccf('ig-hierarchical-grid',import1.IgHierarchicalGridComponent,View_IgHierarchicalGridComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  initialDataBindDepth: 'initialDataBindDepth',
  initialExpandDepth: 'initialExpandDepth',
  odata: 'odata',
  rest: 'rest',
  maxDataBindDepth: 'maxDataBindDepth',
  defaultChildrenDataProperty: 'defaultChildrenDataProperty',
  autoGenerateLayouts: 'autoGenerateLayouts',
  expandCollapseAnimations: 'expandCollapseAnimations',
  expandColWidth: 'expandColWidth',
  pathSeparator: 'pathSeparator',
  animationDuration: 'animationDuration',
  expandTooltip: 'expandTooltip',
  collapseTooltip: 'collapseTooltip',
  columns: 'columns',
  columnLayouts: 'columnLayouts'
}
,{
  rowExpanding: 'rowExpanding',
  rowExpanded: 'rowExpanded',
  rowCollapsing: 'rowCollapsing',
  rowCollapsed: 'rowCollapsed',
  childrenPopulating: 'childrenPopulating',
  childrenPopulated: 'childrenPopulated',
  childGridRendered: 'childGridRendered',
  childGridCreating: 'childGridCreating',
  childGridCreated: 'childGridCreated'
}
,['*']);
const styles_IgComboComponent:any[] = ([] as any[]);
export const RenderType_IgComboComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgComboComponent,
  data: {}
}
);
export function View_IgComboComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgComboComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-combo',([] as any[]),(null as any),(null as any),(null as any),View_IgComboComponent_0,RenderType_IgComboComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgComboComponent,[
      [
        2,
        import2.NgModel
      ]
      ,
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgComboComponentNgFactory:import0.ComponentFactory<import1.IgComboComponent> = import0.ɵccf('ig-combo',import1.IgComboComponent,View_IgComboComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  dropDownWidth: 'dropDownWidth',
  dataSource: 'dataSource',
  dataSourceType: 'dataSourceType',
  dataSourceUrl: 'dataSourceUrl',
  responseTotalRecCountKey: 'responseTotalRecCountKey',
  responseDataKey: 'responseDataKey',
  responseDataType: 'responseDataType',
  responseContentType: 'responseContentType',
  requestType: 'requestType',
  valueKey: 'valueKey',
  textKey: 'textKey',
  itemTemplate: 'itemTemplate',
  headerTemplate: 'headerTemplate',
  footerTemplate: 'footerTemplate',
  inputName: 'inputName',
  animationShowDuration: 'animationShowDuration',
  animationHideDuration: 'animationHideDuration',
  dropDownAttachedToBody: 'dropDownAttachedToBody',
  filteringType: 'filteringType',
  filterExprUrlKey: 'filterExprUrlKey',
  filteringCondition: 'filteringCondition',
  filteringLogic: 'filteringLogic',
  noMatchFoundText: 'noMatchFoundText',
  loadOnDemandSettings: 'loadOnDemandSettings',
  visibleItemsCount: 'visibleItemsCount',
  placeHolder: 'placeHolder',
  mode: 'mode',
  virtualization: 'virtualization',
  multiSelection: 'multiSelection',
  grouping: 'grouping',
  validatorOptions: 'validatorOptions',
  highlightMatchesMode: 'highlightMatchesMode',
  caseSensitive: 'caseSensitive',
  autoSelectFirstMatch: 'autoSelectFirstMatch',
  autoComplete: 'autoComplete',
  allowCustomValue: 'allowCustomValue',
  closeDropDownOnBlur: 'closeDropDownOnBlur',
  delayInputChangeProcessing: 'delayInputChangeProcessing',
  tabIndex: 'tabIndex',
  dropDownOnFocus: 'dropDownOnFocus',
  closeDropDownOnSelect: 'closeDropDownOnSelect',
  selectItemBySpaceKey: 'selectItemBySpaceKey',
  initialSelectedItems: 'initialSelectedItems',
  preventSubmitOnEnter: 'preventSubmitOnEnter',
  format: 'format',
  suppressKeyboard: 'suppressKeyboard',
  enableClearButton: 'enableClearButton',
  dropDownButtonTitle: 'dropDownButtonTitle',
  clearButtonTitle: 'clearButtonTitle',
  dropDownOrientation: 'dropDownOrientation'
}
,{
  rendered: 'rendered',
  dataBinding: 'dataBinding',
  dataBound: 'dataBound',
  filtering: 'filtering',
  filtered: 'filtered',
  itemsRendering: 'itemsRendering',
  itemsRendered: 'itemsRendered',
  dropDownOpening: 'dropDownOpening',
  dropDownOpened: 'dropDownOpened',
  dropDownClosing: 'dropDownClosing',
  dropDownClosed: 'dropDownClosed',
  selectionChanging: 'selectionChanging',
  selectionChanged: 'selectionChanged'
}
,['*']);
const styles_IgCheckboxEditorComponent:any[] = ([] as any[]);
export const RenderType_IgCheckboxEditorComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgCheckboxEditorComponent,
  data: {}
}
);
export function View_IgCheckboxEditorComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgCheckboxEditorComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-checkbox-editor',([] as any[]),(null as any),(null as any),(null as any),View_IgCheckboxEditorComponent_0,RenderType_IgCheckboxEditorComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgCheckboxEditorComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers,
      [
        2,
        import2.NgModel
      ]

    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgCheckboxEditorComponentNgFactory:import0.ComponentFactory<import1.IgCheckboxEditorComponent> = import0.ɵccf('ig-checkbox-editor',import1.IgCheckboxEditorComponent,View_IgCheckboxEditorComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  value: 'value',
  tabIndex: 'tabIndex',
  allowNullValue: 'allowNullValue',
  nullValue: 'nullValue',
  inputName: 'inputName',
  readOnly: 'readOnly',
  validatorOptions: 'validatorOptions',
  checked: 'checked',
  size: 'size',
  iconClass: 'iconClass'
}
,{
  rendering: 'rendering',
  rendered: 'rendered',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  blur: 'blur',
  focus: 'focus',
  keydown: 'keydown',
  keypress: 'keypress',
  keyup: 'keyup',
  valueChanging: 'valueChanging',
  valueChanged: 'valueChanged'
}
,['*']);
const styles_IgCurrencyEditorComponent:any[] = ([] as any[]);
export const RenderType_IgCurrencyEditorComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgCurrencyEditorComponent,
  data: {}
}
);
export function View_IgCurrencyEditorComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgCurrencyEditorComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-currency-editor',([] as any[]),(null as any),(null as any),(null as any),View_IgCurrencyEditorComponent_0,RenderType_IgCurrencyEditorComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgCurrencyEditorComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers,
      [
        2,
        import2.NgModel
      ]

    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgCurrencyEditorComponentNgFactory:import0.ComponentFactory<import1.IgCurrencyEditorComponent> = import0.ɵccf('ig-currency-editor',import1.IgCurrencyEditorComponent,View_IgCurrencyEditorComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  value: 'value',
  tabIndex: 'tabIndex',
  allowNullValue: 'allowNullValue',
  nullValue: 'nullValue',
  inputName: 'inputName',
  readOnly: 'readOnly',
  validatorOptions: 'validatorOptions',
  buttonType: 'buttonType',
  listItems: 'listItems',
  listWidth: 'listWidth',
  listItemHoverDuration: 'listItemHoverDuration',
  dropDownAttachedToBody: 'dropDownAttachedToBody',
  dropDownAnimationDuration: 'dropDownAnimationDuration',
  visibleItemsCount: 'visibleItemsCount',
  includeKeys: 'includeKeys',
  excludeKeys: 'excludeKeys',
  textAlign: 'textAlign',
  placeHolder: 'placeHolder',
  selectionOnFocus: 'selectionOnFocus',
  textMode: 'textMode',
  spinWrapAround: 'spinWrapAround',
  isLimitedToListValues: 'isLimitedToListValues',
  revertIfNotValid: 'revertIfNotValid',
  preventSubmitOnEnter: 'preventSubmitOnEnter',
  dropDownOrientation: 'dropDownOrientation',
  maxLength: 'maxLength',
  dropDownOnReadOnly: 'dropDownOnReadOnly',
  toUpper: 'toUpper',
  toLower: 'toLower',
  locale: 'locale',
  suppressNotifications: 'suppressNotifications',
  regional: 'regional',
  negativeSign: 'negativeSign',
  negativePattern: 'negativePattern',
  decimalSeparator: 'decimalSeparator',
  groupSeparator: 'groupSeparator',
  groups: 'groups',
  maxDecimals: 'maxDecimals',
  minDecimals: 'minDecimals',
  dataMode: 'dataMode',
  minValue: 'minValue',
  maxValue: 'maxValue',
  spinDelta: 'spinDelta',
  scientificFormat: 'scientificFormat',
  positivePattern: 'positivePattern',
  currencySymbol: 'currencySymbol'
}
,{
  rendering: 'rendering',
  rendered: 'rendered',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  blur: 'blur',
  focus: 'focus',
  keydown: 'keydown',
  keypress: 'keypress',
  keyup: 'keyup',
  valueChanging: 'valueChanging',
  valueChanged: 'valueChanged',
  dropDownListOpening: 'dropDownListOpening',
  dropDownListOpened: 'dropDownListOpened',
  dropDownListClosing: 'dropDownListClosing',
  dropDownListClosed: 'dropDownListClosed',
  dropDownItemSelecting: 'dropDownItemSelecting',
  dropDownItemSelected: 'dropDownItemSelected',
  textChanged: 'textChanged'
}
,['*']);
const styles_IgDateEditorComponent:any[] = ([] as any[]);
export const RenderType_IgDateEditorComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgDateEditorComponent,
  data: {}
}
);
export function View_IgDateEditorComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgDateEditorComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-date-editor',([] as any[]),(null as any),(null as any),(null as any),View_IgDateEditorComponent_0,RenderType_IgDateEditorComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgDateEditorComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers,
      [
        2,
        import2.NgModel
      ]

    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgDateEditorComponentNgFactory:import0.ComponentFactory<import1.IgDateEditorComponent> = import0.ɵccf('ig-date-editor',import1.IgDateEditorComponent,View_IgDateEditorComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  value: 'value',
  tabIndex: 'tabIndex',
  allowNullValue: 'allowNullValue',
  nullValue: 'nullValue',
  inputName: 'inputName',
  readOnly: 'readOnly',
  validatorOptions: 'validatorOptions',
  buttonType: 'buttonType',
  listItems: 'listItems',
  listWidth: 'listWidth',
  listItemHoverDuration: 'listItemHoverDuration',
  dropDownAttachedToBody: 'dropDownAttachedToBody',
  dropDownAnimationDuration: 'dropDownAnimationDuration',
  visibleItemsCount: 'visibleItemsCount',
  includeKeys: 'includeKeys',
  excludeKeys: 'excludeKeys',
  textAlign: 'textAlign',
  placeHolder: 'placeHolder',
  selectionOnFocus: 'selectionOnFocus',
  textMode: 'textMode',
  spinWrapAround: 'spinWrapAround',
  isLimitedToListValues: 'isLimitedToListValues',
  revertIfNotValid: 'revertIfNotValid',
  preventSubmitOnEnter: 'preventSubmitOnEnter',
  dropDownOrientation: 'dropDownOrientation',
  maxLength: 'maxLength',
  dropDownOnReadOnly: 'dropDownOnReadOnly',
  toUpper: 'toUpper',
  toLower: 'toLower',
  locale: 'locale',
  suppressNotifications: 'suppressNotifications',
  regional: 'regional',
  inputMask: 'inputMask',
  dataMode: 'dataMode',
  unfilledCharsPrompt: 'unfilledCharsPrompt',
  padChar: 'padChar',
  emptyChar: 'emptyChar',
  minValue: 'minValue',
  maxValue: 'maxValue',
  dateDisplayFormat: 'dateDisplayFormat',
  dateInputFormat: 'dateInputFormat',
  spinDelta: 'spinDelta',
  limitSpinToCurrentField: 'limitSpinToCurrentField',
  enableUTCDates: 'enableUTCDates',
  centuryThreshold: 'centuryThreshold',
  yearShift: 'yearShift'
}
,{
  rendering: 'rendering',
  rendered: 'rendered',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  blur: 'blur',
  focus: 'focus',
  keydown: 'keydown',
  keypress: 'keypress',
  keyup: 'keyup',
  valueChanging: 'valueChanging',
  valueChanged: 'valueChanged',
  dropDownListOpening: 'dropDownListOpening',
  dropDownListOpened: 'dropDownListOpened',
  dropDownListClosing: 'dropDownListClosing',
  dropDownListClosed: 'dropDownListClosed',
  dropDownItemSelecting: 'dropDownItemSelecting',
  dropDownItemSelected: 'dropDownItemSelected',
  textChanged: 'textChanged'
}
,['*']);
const styles_IgDatePickerComponent:any[] = ([] as any[]);
export const RenderType_IgDatePickerComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgDatePickerComponent,
  data: {}
}
);
export function View_IgDatePickerComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgDatePickerComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-date-picker',([] as any[]),(null as any),(null as any),(null as any),View_IgDatePickerComponent_0,RenderType_IgDatePickerComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgDatePickerComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers,
      [
        2,
        import2.NgModel
      ]

    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgDatePickerComponentNgFactory:import0.ComponentFactory<import1.IgDatePickerComponent> = import0.ɵccf('ig-date-picker',import1.IgDatePickerComponent,View_IgDatePickerComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  value: 'value',
  tabIndex: 'tabIndex',
  allowNullValue: 'allowNullValue',
  nullValue: 'nullValue',
  inputName: 'inputName',
  readOnly: 'readOnly',
  validatorOptions: 'validatorOptions',
  buttonType: 'buttonType',
  listItems: 'listItems',
  listWidth: 'listWidth',
  listItemHoverDuration: 'listItemHoverDuration',
  dropDownAttachedToBody: 'dropDownAttachedToBody',
  dropDownAnimationDuration: 'dropDownAnimationDuration',
  visibleItemsCount: 'visibleItemsCount',
  includeKeys: 'includeKeys',
  excludeKeys: 'excludeKeys',
  textAlign: 'textAlign',
  placeHolder: 'placeHolder',
  selectionOnFocus: 'selectionOnFocus',
  textMode: 'textMode',
  spinWrapAround: 'spinWrapAround',
  isLimitedToListValues: 'isLimitedToListValues',
  revertIfNotValid: 'revertIfNotValid',
  preventSubmitOnEnter: 'preventSubmitOnEnter',
  dropDownOrientation: 'dropDownOrientation',
  maxLength: 'maxLength',
  dropDownOnReadOnly: 'dropDownOnReadOnly',
  toUpper: 'toUpper',
  toLower: 'toLower',
  locale: 'locale',
  suppressNotifications: 'suppressNotifications',
  regional: 'regional',
  inputMask: 'inputMask',
  dataMode: 'dataMode',
  unfilledCharsPrompt: 'unfilledCharsPrompt',
  padChar: 'padChar',
  emptyChar: 'emptyChar',
  minValue: 'minValue',
  maxValue: 'maxValue',
  dateDisplayFormat: 'dateDisplayFormat',
  dateInputFormat: 'dateInputFormat',
  spinDelta: 'spinDelta',
  limitSpinToCurrentField: 'limitSpinToCurrentField',
  enableUTCDates: 'enableUTCDates',
  centuryThreshold: 'centuryThreshold',
  yearShift: 'yearShift',
  datepickerOptions: 'datepickerOptions'
}
,{
  rendering: 'rendering',
  rendered: 'rendered',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  blur: 'blur',
  focus: 'focus',
  keydown: 'keydown',
  keypress: 'keypress',
  keyup: 'keyup',
  valueChanging: 'valueChanging',
  valueChanged: 'valueChanged',
  dropDownListOpening: 'dropDownListOpening',
  dropDownListOpened: 'dropDownListOpened',
  dropDownListClosing: 'dropDownListClosing',
  dropDownListClosed: 'dropDownListClosed',
  dropDownItemSelecting: 'dropDownItemSelecting',
  dropDownItemSelected: 'dropDownItemSelected',
  textChanged: 'textChanged',
  itemSelected: 'itemSelected'
}
,['*']);
const styles_IgMaskEditorComponent:any[] = ([] as any[]);
export const RenderType_IgMaskEditorComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgMaskEditorComponent,
  data: {}
}
);
export function View_IgMaskEditorComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgMaskEditorComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-mask-editor',([] as any[]),(null as any),(null as any),(null as any),View_IgMaskEditorComponent_0,RenderType_IgMaskEditorComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgMaskEditorComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers,
      [
        2,
        import2.NgModel
      ]

    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgMaskEditorComponentNgFactory:import0.ComponentFactory<import1.IgMaskEditorComponent> = import0.ɵccf('ig-mask-editor',import1.IgMaskEditorComponent,View_IgMaskEditorComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  value: 'value',
  tabIndex: 'tabIndex',
  allowNullValue: 'allowNullValue',
  nullValue: 'nullValue',
  inputName: 'inputName',
  readOnly: 'readOnly',
  validatorOptions: 'validatorOptions',
  buttonType: 'buttonType',
  listItems: 'listItems',
  listWidth: 'listWidth',
  listItemHoverDuration: 'listItemHoverDuration',
  dropDownAttachedToBody: 'dropDownAttachedToBody',
  dropDownAnimationDuration: 'dropDownAnimationDuration',
  visibleItemsCount: 'visibleItemsCount',
  includeKeys: 'includeKeys',
  excludeKeys: 'excludeKeys',
  textAlign: 'textAlign',
  placeHolder: 'placeHolder',
  selectionOnFocus: 'selectionOnFocus',
  textMode: 'textMode',
  spinWrapAround: 'spinWrapAround',
  isLimitedToListValues: 'isLimitedToListValues',
  revertIfNotValid: 'revertIfNotValid',
  preventSubmitOnEnter: 'preventSubmitOnEnter',
  dropDownOrientation: 'dropDownOrientation',
  maxLength: 'maxLength',
  dropDownOnReadOnly: 'dropDownOnReadOnly',
  toUpper: 'toUpper',
  toLower: 'toLower',
  locale: 'locale',
  suppressNotifications: 'suppressNotifications',
  regional: 'regional',
  inputMask: 'inputMask',
  dataMode: 'dataMode',
  unfilledCharsPrompt: 'unfilledCharsPrompt',
  padChar: 'padChar',
  emptyChar: 'emptyChar'
}
,{
  rendering: 'rendering',
  rendered: 'rendered',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  blur: 'blur',
  focus: 'focus',
  keydown: 'keydown',
  keypress: 'keypress',
  keyup: 'keyup',
  valueChanging: 'valueChanging',
  valueChanged: 'valueChanged',
  dropDownListOpening: 'dropDownListOpening',
  dropDownListOpened: 'dropDownListOpened',
  dropDownListClosing: 'dropDownListClosing',
  dropDownListClosed: 'dropDownListClosed',
  dropDownItemSelecting: 'dropDownItemSelecting',
  dropDownItemSelected: 'dropDownItemSelected',
  textChanged: 'textChanged'
}
,['*']);
const styles_IgNumericEditorComponent:any[] = ([] as any[]);
export const RenderType_IgNumericEditorComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgNumericEditorComponent,
  data: {}
}
);
export function View_IgNumericEditorComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgNumericEditorComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-numeric-editor',([] as any[]),(null as any),(null as any),(null as any),View_IgNumericEditorComponent_0,RenderType_IgNumericEditorComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgNumericEditorComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers,
      [
        2,
        import2.NgModel
      ]

    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgNumericEditorComponentNgFactory:import0.ComponentFactory<import1.IgNumericEditorComponent> = import0.ɵccf('ig-numeric-editor',import1.IgNumericEditorComponent,View_IgNumericEditorComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  value: 'value',
  tabIndex: 'tabIndex',
  allowNullValue: 'allowNullValue',
  nullValue: 'nullValue',
  inputName: 'inputName',
  readOnly: 'readOnly',
  validatorOptions: 'validatorOptions',
  buttonType: 'buttonType',
  listItems: 'listItems',
  listWidth: 'listWidth',
  listItemHoverDuration: 'listItemHoverDuration',
  dropDownAttachedToBody: 'dropDownAttachedToBody',
  dropDownAnimationDuration: 'dropDownAnimationDuration',
  visibleItemsCount: 'visibleItemsCount',
  includeKeys: 'includeKeys',
  excludeKeys: 'excludeKeys',
  textAlign: 'textAlign',
  placeHolder: 'placeHolder',
  selectionOnFocus: 'selectionOnFocus',
  textMode: 'textMode',
  spinWrapAround: 'spinWrapAround',
  isLimitedToListValues: 'isLimitedToListValues',
  revertIfNotValid: 'revertIfNotValid',
  preventSubmitOnEnter: 'preventSubmitOnEnter',
  dropDownOrientation: 'dropDownOrientation',
  maxLength: 'maxLength',
  dropDownOnReadOnly: 'dropDownOnReadOnly',
  toUpper: 'toUpper',
  toLower: 'toLower',
  locale: 'locale',
  suppressNotifications: 'suppressNotifications',
  regional: 'regional',
  negativeSign: 'negativeSign',
  negativePattern: 'negativePattern',
  decimalSeparator: 'decimalSeparator',
  groupSeparator: 'groupSeparator',
  groups: 'groups',
  maxDecimals: 'maxDecimals',
  minDecimals: 'minDecimals',
  dataMode: 'dataMode',
  minValue: 'minValue',
  maxValue: 'maxValue',
  spinDelta: 'spinDelta',
  scientificFormat: 'scientificFormat'
}
,{
  rendering: 'rendering',
  rendered: 'rendered',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  blur: 'blur',
  focus: 'focus',
  keydown: 'keydown',
  keypress: 'keypress',
  keyup: 'keyup',
  valueChanging: 'valueChanging',
  valueChanged: 'valueChanged',
  dropDownListOpening: 'dropDownListOpening',
  dropDownListOpened: 'dropDownListOpened',
  dropDownListClosing: 'dropDownListClosing',
  dropDownListClosed: 'dropDownListClosed',
  dropDownItemSelecting: 'dropDownItemSelecting',
  dropDownItemSelected: 'dropDownItemSelected',
  textChanged: 'textChanged'
}
,['*']);
const styles_IgPercentEditorComponent:any[] = ([] as any[]);
export const RenderType_IgPercentEditorComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgPercentEditorComponent,
  data: {}
}
);
export function View_IgPercentEditorComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgPercentEditorComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-percent-editor',([] as any[]),(null as any),(null as any),(null as any),View_IgPercentEditorComponent_0,RenderType_IgPercentEditorComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgPercentEditorComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers,
      [
        2,
        import2.NgModel
      ]

    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgPercentEditorComponentNgFactory:import0.ComponentFactory<import1.IgPercentEditorComponent> = import0.ɵccf('ig-percent-editor',import1.IgPercentEditorComponent,View_IgPercentEditorComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  value: 'value',
  tabIndex: 'tabIndex',
  allowNullValue: 'allowNullValue',
  nullValue: 'nullValue',
  inputName: 'inputName',
  readOnly: 'readOnly',
  validatorOptions: 'validatorOptions',
  buttonType: 'buttonType',
  listItems: 'listItems',
  listWidth: 'listWidth',
  listItemHoverDuration: 'listItemHoverDuration',
  dropDownAttachedToBody: 'dropDownAttachedToBody',
  dropDownAnimationDuration: 'dropDownAnimationDuration',
  visibleItemsCount: 'visibleItemsCount',
  includeKeys: 'includeKeys',
  excludeKeys: 'excludeKeys',
  textAlign: 'textAlign',
  placeHolder: 'placeHolder',
  selectionOnFocus: 'selectionOnFocus',
  textMode: 'textMode',
  spinWrapAround: 'spinWrapAround',
  isLimitedToListValues: 'isLimitedToListValues',
  revertIfNotValid: 'revertIfNotValid',
  preventSubmitOnEnter: 'preventSubmitOnEnter',
  dropDownOrientation: 'dropDownOrientation',
  maxLength: 'maxLength',
  dropDownOnReadOnly: 'dropDownOnReadOnly',
  toUpper: 'toUpper',
  toLower: 'toLower',
  locale: 'locale',
  suppressNotifications: 'suppressNotifications',
  regional: 'regional',
  negativeSign: 'negativeSign',
  negativePattern: 'negativePattern',
  decimalSeparator: 'decimalSeparator',
  groupSeparator: 'groupSeparator',
  groups: 'groups',
  maxDecimals: 'maxDecimals',
  minDecimals: 'minDecimals',
  dataMode: 'dataMode',
  minValue: 'minValue',
  maxValue: 'maxValue',
  spinDelta: 'spinDelta',
  scientificFormat: 'scientificFormat',
  positivePattern: 'positivePattern',
  percentSymbol: 'percentSymbol',
  displayFactor: 'displayFactor'
}
,{
  rendering: 'rendering',
  rendered: 'rendered',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  blur: 'blur',
  focus: 'focus',
  keydown: 'keydown',
  keypress: 'keypress',
  keyup: 'keyup',
  valueChanging: 'valueChanging',
  valueChanged: 'valueChanged',
  dropDownListOpening: 'dropDownListOpening',
  dropDownListOpened: 'dropDownListOpened',
  dropDownListClosing: 'dropDownListClosing',
  dropDownListClosed: 'dropDownListClosed',
  dropDownItemSelecting: 'dropDownItemSelecting',
  dropDownItemSelected: 'dropDownItemSelected',
  textChanged: 'textChanged'
}
,['*']);
const styles_IgTextEditorComponent:any[] = ([] as any[]);
export const RenderType_IgTextEditorComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgTextEditorComponent,
  data: {}
}
);
export function View_IgTextEditorComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgTextEditorComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-text-editor',([] as any[]),(null as any),(null as any),(null as any),View_IgTextEditorComponent_0,RenderType_IgTextEditorComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgTextEditorComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers,
      [
        2,
        import2.NgModel
      ]

    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgTextEditorComponentNgFactory:import0.ComponentFactory<import1.IgTextEditorComponent> = import0.ɵccf('ig-text-editor',import1.IgTextEditorComponent,View_IgTextEditorComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  value: 'value',
  tabIndex: 'tabIndex',
  allowNullValue: 'allowNullValue',
  nullValue: 'nullValue',
  inputName: 'inputName',
  readOnly: 'readOnly',
  validatorOptions: 'validatorOptions',
  buttonType: 'buttonType',
  listItems: 'listItems',
  listWidth: 'listWidth',
  listItemHoverDuration: 'listItemHoverDuration',
  dropDownAttachedToBody: 'dropDownAttachedToBody',
  dropDownAnimationDuration: 'dropDownAnimationDuration',
  visibleItemsCount: 'visibleItemsCount',
  includeKeys: 'includeKeys',
  excludeKeys: 'excludeKeys',
  textAlign: 'textAlign',
  placeHolder: 'placeHolder',
  selectionOnFocus: 'selectionOnFocus',
  textMode: 'textMode',
  spinWrapAround: 'spinWrapAround',
  isLimitedToListValues: 'isLimitedToListValues',
  revertIfNotValid: 'revertIfNotValid',
  preventSubmitOnEnter: 'preventSubmitOnEnter',
  dropDownOrientation: 'dropDownOrientation',
  maxLength: 'maxLength',
  dropDownOnReadOnly: 'dropDownOnReadOnly',
  toUpper: 'toUpper',
  toLower: 'toLower',
  locale: 'locale',
  suppressNotifications: 'suppressNotifications'
}
,{
  rendering: 'rendering',
  rendered: 'rendered',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  blur: 'blur',
  focus: 'focus',
  keydown: 'keydown',
  keypress: 'keypress',
  keyup: 'keyup',
  valueChanging: 'valueChanging',
  valueChanged: 'valueChanged',
  dropDownListOpening: 'dropDownListOpening',
  dropDownListOpened: 'dropDownListOpened',
  dropDownListClosing: 'dropDownListClosing',
  dropDownListClosed: 'dropDownListClosed',
  dropDownItemSelecting: 'dropDownItemSelecting',
  dropDownItemSelected: 'dropDownItemSelected',
  textChanged: 'textChanged'
}
,['*']);
const styles_IgTreeComponent:any[] = ([] as any[]);
export const RenderType_IgTreeComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgTreeComponent,
  data: {}
}
);
export function View_IgTreeComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgTreeComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-tree',([] as any[]),(null as any),(null as any),(null as any),View_IgTreeComponent_0,RenderType_IgTreeComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgTreeComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgTreeComponentNgFactory:import0.ComponentFactory<import1.IgTreeComponent> = import0.ɵccf('ig-tree',import1.IgTreeComponent,View_IgTreeComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  checkboxMode: 'checkboxMode',
  singleBranchExpand: 'singleBranchExpand',
  hotTracking: 'hotTracking',
  parentNodeImageUrl: 'parentNodeImageUrl',
  parentNodeImageClass: 'parentNodeImageClass',
  parentNodeImageTooltip: 'parentNodeImageTooltip',
  leafNodeImageUrl: 'leafNodeImageUrl',
  leafNodeImageClass: 'leafNodeImageClass',
  leafNodeImageTooltip: 'leafNodeImageTooltip',
  animationDuration: 'animationDuration',
  pathSeparator: 'pathSeparator',
  dataSource: 'dataSource',
  dataSourceUrl: 'dataSourceUrl',
  dataSourceType: 'dataSourceType',
  responseDataKey: 'responseDataKey',
  responseDataType: 'responseDataType',
  requestType: 'requestType',
  responseContentType: 'responseContentType',
  initialExpandDepth: 'initialExpandDepth',
  loadOnDemand: 'loadOnDemand',
  bindings: 'bindings',
  defaultNodeTarget: 'defaultNodeTarget',
  dragAndDrop: 'dragAndDrop',
  updateUrl: 'updateUrl',
  dragAndDropSettings: 'dragAndDropSettings'
}
,{
  dataBinding: 'dataBinding',
  dataBound: 'dataBound',
  rendering: 'rendering',
  rendered: 'rendered',
  selectionChanging: 'selectionChanging',
  selectionChanged: 'selectionChanged',
  nodeCheckstateChanging: 'nodeCheckstateChanging',
  nodeCheckstateChanged: 'nodeCheckstateChanged',
  nodePopulating: 'nodePopulating',
  nodePopulated: 'nodePopulated',
  nodeCollapsing: 'nodeCollapsing',
  nodeCollapsed: 'nodeCollapsed',
  nodeExpanding: 'nodeExpanding',
  nodeExpanded: 'nodeExpanded',
  nodeClick: 'nodeClick',
  nodeDoubleClick: 'nodeDoubleClick',
  dragStart: 'dragStart',
  drag: 'drag',
  dragStop: 'dragStop',
  nodeDropping: 'nodeDropping',
  nodeDropped: 'nodeDropped'
}
,['*']);
const styles_IgDialogComponent:any[] = ([] as any[]);
export const RenderType_IgDialogComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgDialogComponent,
  data: {}
}
);
export function View_IgDialogComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgDialogComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-dialog',([] as any[]),(null as any),(null as any),(null as any),View_IgDialogComponent_0,RenderType_IgDialogComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgDialogComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgDialogComponentNgFactory:import0.ComponentFactory<import1.IgDialogComponent> = import0.ɵccf('ig-dialog',import1.IgDialogComponent,View_IgDialogComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  mainElement: 'mainElement',
  state: 'state',
  pinned: 'pinned',
  closeOnEscape: 'closeOnEscape',
  showCloseButton: 'showCloseButton',
  showMaximizeButton: 'showMaximizeButton',
  showMinimizeButton: 'showMinimizeButton',
  showPinButton: 'showPinButton',
  pinOnMinimized: 'pinOnMinimized',
  imageClass: 'imageClass',
  headerText: 'headerText',
  showHeader: 'showHeader',
  showFooter: 'showFooter',
  footerText: 'footerText',
  dialogClass: 'dialogClass',
  container: 'container',
  height: 'height',
  width: 'width',
  minHeight: 'minHeight',
  minWidth: 'minWidth',
  maxHeight: 'maxHeight',
  maxWidth: 'maxWidth',
  draggable: 'draggable',
  position: 'position',
  resizable: 'resizable',
  tabIndex: 'tabIndex',
  openAnimation: 'openAnimation',
  closeAnimation: 'closeAnimation',
  zIndex: 'zIndex',
  modal: 'modal',
  trackFocus: 'trackFocus',
  closeButtonTitle: 'closeButtonTitle',
  minimizeButtonTitle: 'minimizeButtonTitle',
  maximizeButtonTitle: 'maximizeButtonTitle',
  pinButtonTitle: 'pinButtonTitle',
  unpinButtonTitle: 'unpinButtonTitle',
  restoreButtonTitle: 'restoreButtonTitle',
  temporaryUrl: 'temporaryUrl',
  enableHeaderFocus: 'enableHeaderFocus',
  enableDblclick: 'enableDblclick'
}
,{
  stateChanging: 'stateChanging',
  stateChanged: 'stateChanged',
  animationEnded: 'animationEnded',
  focus: 'focus',
  blur: 'blur'
}
,['*']);
const styles_IgSplitterComponent:any[] = ([] as any[]);
export const RenderType_IgSplitterComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgSplitterComponent,
  data: {}
}
);
export function View_IgSplitterComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgSplitterComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-splitter',([] as any[]),(null as any),(null as any),(null as any),View_IgSplitterComponent_0,RenderType_IgSplitterComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgSplitterComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgSplitterComponentNgFactory:import0.ComponentFactory<import1.IgSplitterComponent> = import0.ɵccf('ig-splitter',import1.IgSplitterComponent,View_IgSplitterComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  orientation: 'orientation',
  panels: 'panels',
  dragDelta: 'dragDelta',
  resizeOtherSplitters: 'resizeOtherSplitters'
}
,{
  collapsed: 'collapsed',
  expanded: 'expanded',
  resizeStarted: 'resizeStarted',
  resizing: 'resizing',
  resizeEnded: 'resizeEnded',
  layoutRefreshing: 'layoutRefreshing',
  layoutRefreshed: 'layoutRefreshed'
}
,['*']);
const styles_IgLayoutManagerComponent:any[] = ([] as any[]);
export const RenderType_IgLayoutManagerComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgLayoutManagerComponent,
  data: {}
}
);
export function View_IgLayoutManagerComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgLayoutManagerComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-layout-manager',([] as any[]),(null as any),(null as any),(null as any),View_IgLayoutManagerComponent_0,RenderType_IgLayoutManagerComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgLayoutManagerComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgLayoutManagerComponentNgFactory:import0.ComponentFactory<import1.IgLayoutManagerComponent> = import0.ɵccf('ig-layout-manager',import1.IgLayoutManagerComponent,View_IgLayoutManagerComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  borderLayout: 'borderLayout',
  gridLayout: 'gridLayout',
  height: 'height',
  itemCount: 'itemCount',
  items: 'items',
  layoutMode: 'layoutMode',
  width: 'width'
}
,{
  internalResized: 'internalResized',
  internalResizing: 'internalResizing',
  itemRendered: 'itemRendered',
  itemRendering: 'itemRendering',
  rendered: 'rendered'
}
,['*']);
const styles_IgTileManagerComponent:any[] = ([] as any[]);
export const RenderType_IgTileManagerComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgTileManagerComponent,
  data: {}
}
);
export function View_IgTileManagerComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgTileManagerComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-tile-manager',([] as any[]),(null as any),(null as any),(null as any),View_IgTileManagerComponent_0,RenderType_IgTileManagerComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgTileManagerComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgTileManagerComponentNgFactory:import0.ComponentFactory<import1.IgTileManagerComponent> = import0.ɵccf('ig-tile-manager',import1.IgTileManagerComponent,View_IgTileManagerComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  columnWidth: 'columnWidth',
  columnHeight: 'columnHeight',
  cols: 'cols',
  rows: 'rows',
  marginLeft: 'marginLeft',
  marginTop: 'marginTop',
  rearrangeItems: 'rearrangeItems',
  items: 'items',
  dataSource: 'dataSource',
  minimizedState: 'minimizedState',
  maximizedState: 'maximizedState',
  maximizedTileIndex: 'maximizedTileIndex',
  rightPanelCols: 'rightPanelCols',
  rightPanelTilesWidth: 'rightPanelTilesWidth',
  rightPanelTilesHeight: 'rightPanelTilesHeight',
  showRightPanelScroll: 'showRightPanelScroll',
  splitterOptions: 'splitterOptions',
  preventMaximizingSelector: 'preventMaximizingSelector',
  animationDuration: 'animationDuration',
  dataSourceUrl: 'dataSourceUrl',
  responseDataKey: 'responseDataKey',
  responseDataType: 'responseDataType',
  dataSourceType: 'dataSourceType',
  requestType: 'requestType',
  responseContentType: 'responseContentType'
}
,{
  dataBinding: 'dataBinding',
  dataBound: 'dataBound',
  rendering: 'rendering',
  rendered: 'rendered',
  tileRendering: 'tileRendering',
  tileRendered: 'tileRendered',
  tileMaximizing: 'tileMaximizing',
  tileMaximized: 'tileMaximized',
  tileMinimizing: 'tileMinimizing',
  tileMinimized: 'tileMinimized'
}
,['*']);
const styles_IgHtmlEditorComponent:any[] = ([] as any[]);
export const RenderType_IgHtmlEditorComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgHtmlEditorComponent,
  data: {}
}
);
export function View_IgHtmlEditorComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgHtmlEditorComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-html-editor',([] as any[]),(null as any),(null as any),(null as any),View_IgHtmlEditorComponent_0,RenderType_IgHtmlEditorComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgHtmlEditorComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers,
      [
        2,
        import2.NgModel
      ]
      ,
      import0.NgZone
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgHtmlEditorComponentNgFactory:import0.ComponentFactory<import1.IgHtmlEditorComponent> = import0.ɵccf('ig-html-editor',import1.IgHtmlEditorComponent,View_IgHtmlEditorComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  showFormattingToolbar: 'showFormattingToolbar',
  showTextToolbar: 'showTextToolbar',
  showInsertObjectToolbar: 'showInsertObjectToolbar',
  showCopyPasteToolbar: 'showCopyPasteToolbar',
  width: 'width',
  height: 'height',
  toolbarSettings: 'toolbarSettings',
  customToolbars: 'customToolbars',
  inputName: 'inputName',
  value: 'value'
}
,{
  rendered: 'rendered',
  rendering: 'rendering',
  actionExecuting: 'actionExecuting',
  actionExecuted: 'actionExecuted',
  toolbarCollapsing: 'toolbarCollapsing',
  toolbarCollapsed: 'toolbarCollapsed',
  toolbarExpanding: 'toolbarExpanding',
  toolbarExpanded: 'toolbarExpanded',
  cut: 'cut',
  copy: 'copy',
  paste: 'paste',
  undo: 'undo',
  redo: 'redo',
  workspaceResized: 'workspaceResized'
}
,['*']);
const styles_IgValidatorComponent:any[] = ([] as any[]);
export const RenderType_IgValidatorComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgValidatorComponent,
  data: {}
}
);
export function View_IgValidatorComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgValidatorComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-validator',([] as any[]),(null as any),(null as any),(null as any),View_IgValidatorComponent_0,RenderType_IgValidatorComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgValidatorComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgValidatorComponentNgFactory:import0.ComponentFactory<import1.IgValidatorComponent> = import0.ɵccf('ig-validator',import1.IgValidatorComponent,View_IgValidatorComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  onchange: 'onchange',
  onblur: 'onblur',
  onsubmit: 'onsubmit',
  required: 'required',
  number: 'number',
  date: 'date',
  email: 'email',
  lengthRange: 'lengthRange',
  valueRange: 'valueRange',
  creditCard: 'creditCard',
  pattern: 'pattern',
  messageTarget: 'messageTarget',
  errorMessage: 'errorMessage',
  successMessage: 'successMessage',
  threshold: 'threshold',
  equalTo: 'equalTo',
  custom: 'custom',
  fields: 'fields',
  notificationOptions: 'notificationOptions',
  requiredIndication: 'requiredIndication',
  optionalIndication: 'optionalIndication'
}
,{
  validating: 'validating',
  validated: 'validated',
  success: 'success',
  error: 'error',
  errorShowing: 'errorShowing',
  errorHiding: 'errorHiding',
  errorShown: 'errorShown',
  errorHidden: 'errorHidden',
  successShowing: 'successShowing',
  successHiding: 'successHiding',
  successShown: 'successShown',
  successHidden: 'successHidden',
  formValidating: 'formValidating',
  formValidated: 'formValidated',
  formError: 'formError',
  formSuccess: 'formSuccess'
}
,['*']);
const styles_IgPivotDataSelectorComponent:any[] = ([] as any[]);
export const RenderType_IgPivotDataSelectorComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgPivotDataSelectorComponent,
  data: {}
}
);
export function View_IgPivotDataSelectorComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgPivotDataSelectorComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-pivot-data-selector',([] as any[]),(null as any),(null as any),(null as any),View_IgPivotDataSelectorComponent_0,RenderType_IgPivotDataSelectorComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgPivotDataSelectorComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgPivotDataSelectorComponentNgFactory:import0.ComponentFactory<import1.IgPivotDataSelectorComponent> = import0.ɵccf('ig-pivot-data-selector',import1.IgPivotDataSelectorComponent,View_IgPivotDataSelectorComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  dataSource: 'dataSource',
  dataSourceOptions: 'dataSourceOptions',
  deferUpdate: 'deferUpdate',
  dragAndDropSettings: 'dragAndDropSettings',
  dropDownParent: 'dropDownParent',
  disableRowsDropArea: 'disableRowsDropArea',
  disableColumnsDropArea: 'disableColumnsDropArea',
  disableMeasuresDropArea: 'disableMeasuresDropArea',
  disableFiltersDropArea: 'disableFiltersDropArea',
  customMoveValidation: 'customMoveValidation'
}
,{
  dataSelectorRendered: 'dataSelectorRendered',
  dataSourceInitialized: 'dataSourceInitialized',
  dataSourceUpdated: 'dataSourceUpdated',
  deferUpdateChanged: 'deferUpdateChanged',
  dragStart: 'dragStart',
  drag: 'drag',
  dragStop: 'dragStop',
  metadataDropping: 'metadataDropping',
  metadataDropped: 'metadataDropped',
  metadataRemoving: 'metadataRemoving',
  metadataRemoved: 'metadataRemoved',
  filterDropDownOpening: 'filterDropDownOpening',
  filterDropDownOpened: 'filterDropDownOpened',
  filterMembersLoaded: 'filterMembersLoaded',
  filterDropDownOk: 'filterDropDownOk',
  filterDropDownClosing: 'filterDropDownClosing',
  filterDropDownClosed: 'filterDropDownClosed'
}
,['*']);
const styles_IgPivotGridComponent:any[] = ([] as any[]);
export const RenderType_IgPivotGridComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgPivotGridComponent,
  data: {}
}
);
export function View_IgPivotGridComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgPivotGridComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-pivot-grid',([] as any[]),(null as any),(null as any),(null as any),View_IgPivotGridComponent_0,RenderType_IgPivotGridComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgPivotGridComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgPivotGridComponentNgFactory:import0.ComponentFactory<import1.IgPivotGridComponent> = import0.ɵccf('ig-pivot-grid',import1.IgPivotGridComponent,View_IgPivotGridComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  dataSource: 'dataSource',
  dataSourceOptions: 'dataSourceOptions',
  deferUpdate: 'deferUpdate',
  isParentInFrontForColumns: 'isParentInFrontForColumns',
  isParentInFrontForRows: 'isParentInFrontForRows',
  compactColumnHeaders: 'compactColumnHeaders',
  compactRowHeaders: 'compactRowHeaders',
  rowHeadersLayout: 'rowHeadersLayout',
  compactColumnHeaderIndentation: 'compactColumnHeaderIndentation',
  compactRowHeaderIndentation: 'compactRowHeaderIndentation',
  rowHeaderLinkGroupIndentation: 'rowHeaderLinkGroupIndentation',
  treeRowHeaderIndentation: 'treeRowHeaderIndentation',
  defaultRowHeaderWidth: 'defaultRowHeaderWidth',
  allowSorting: 'allowSorting',
  firstSortDirection: 'firstSortDirection',
  allowHeaderRowsSorting: 'allowHeaderRowsSorting',
  allowHeaderColumnsSorting: 'allowHeaderColumnsSorting',
  levelSortDirections: 'levelSortDirections',
  defaultLevelSortBehavior: 'defaultLevelSortBehavior',
  firstLevelSortDirection: 'firstLevelSortDirection',
  gridOptions: 'gridOptions',
  dragAndDropSettings: 'dragAndDropSettings',
  dropDownParent: 'dropDownParent',
  disableRowsDropArea: 'disableRowsDropArea',
  disableColumnsDropArea: 'disableColumnsDropArea',
  disableMeasuresDropArea: 'disableMeasuresDropArea',
  disableFiltersDropArea: 'disableFiltersDropArea',
  hideRowsDropArea: 'hideRowsDropArea',
  hideColumnsDropArea: 'hideColumnsDropArea',
  hideMeasuresDropArea: 'hideMeasuresDropArea',
  hideFiltersDropArea: 'hideFiltersDropArea',
  customMoveValidation: 'customMoveValidation'
}
,{
  dataSourceInitialized: 'dataSourceInitialized',
  dataSourceUpdated: 'dataSourceUpdated',
  pivotGridHeadersRendered: 'pivotGridHeadersRendered',
  pivotGridRendered: 'pivotGridRendered',
  tupleMemberExpanding: 'tupleMemberExpanding',
  tupleMemberExpanded: 'tupleMemberExpanded',
  tupleMemberCollapsing: 'tupleMemberCollapsing',
  tupleMemberCollapsed: 'tupleMemberCollapsed',
  sorting: 'sorting',
  sorted: 'sorted',
  headersSorting: 'headersSorting',
  headersSorted: 'headersSorted',
  dragStart: 'dragStart',
  drag: 'drag',
  dragStop: 'dragStop',
  metadataDropping: 'metadataDropping',
  metadataDropped: 'metadataDropped',
  metadataRemoving: 'metadataRemoving',
  metadataRemoved: 'metadataRemoved',
  filterDropDownOpening: 'filterDropDownOpening',
  filterDropDownOpened: 'filterDropDownOpened',
  filterMembersLoaded: 'filterMembersLoaded',
  filterDropDownOk: 'filterDropDownOk',
  filterDropDownClosing: 'filterDropDownClosing',
  filterDropDownClosed: 'filterDropDownClosed'
}
,['*']);
const styles_IgDataChartComponent:any[] = ([] as any[]);
export const RenderType_IgDataChartComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgDataChartComponent,
  data: {}
}
);
export function View_IgDataChartComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgDataChartComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-data-chart',([] as any[]),(null as any),(null as any),(null as any),View_IgDataChartComponent_0,RenderType_IgDataChartComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgDataChartComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgDataChartComponentNgFactory:import0.ComponentFactory<import1.IgDataChartComponent> = import0.ɵccf('ig-data-chart',import1.IgDataChartComponent,View_IgDataChartComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  isPagePanningAllowed: 'isPagePanningAllowed',
  syncChannel: 'syncChannel',
  synchronizeVertically: 'synchronizeVertically',
  synchronizeHorizontally: 'synchronizeHorizontally',
  crosshairPoint: 'crosshairPoint',
  windowRect: 'windowRect',
  horizontalZoomable: 'horizontalZoomable',
  verticalZoomable: 'verticalZoomable',
  windowResponse: 'windowResponse',
  windowRectMinWidth: 'windowRectMinWidth',
  overviewPlusDetailPaneVisibility: 'overviewPlusDetailPaneVisibility',
  crosshairVisibility: 'crosshairVisibility',
  plotAreaBackground: 'plotAreaBackground',
  defaultInteraction: 'defaultInteraction',
  dragModifier: 'dragModifier',
  panModifier: 'panModifier',
  previewRect: 'previewRect',
  windowPositionHorizontal: 'windowPositionHorizontal',
  windowPositionVertical: 'windowPositionVertical',
  windowScaleHorizontal: 'windowScaleHorizontal',
  windowScaleVertical: 'windowScaleVertical',
  circleMarkerTemplate: 'circleMarkerTemplate',
  triangleMarkerTemplate: 'triangleMarkerTemplate',
  pyramidMarkerTemplate: 'pyramidMarkerTemplate',
  squareMarkerTemplate: 'squareMarkerTemplate',
  diamondMarkerTemplate: 'diamondMarkerTemplate',
  pentagonMarkerTemplate: 'pentagonMarkerTemplate',
  hexagonMarkerTemplate: 'hexagonMarkerTemplate',
  tetragramMarkerTemplate: 'tetragramMarkerTemplate',
  pentagramMarkerTemplate: 'pentagramMarkerTemplate',
  hexagramMarkerTemplate: 'hexagramMarkerTemplate',
  topMargin: 'topMargin',
  leftMargin: 'leftMargin',
  rightMargin: 'rightMargin',
  bottomMargin: 'bottomMargin',
  autoMarginWidth: 'autoMarginWidth',
  autoMarginHeight: 'autoMarginHeight',
  isSquare: 'isSquare',
  gridMode: 'gridMode',
  brushes: 'brushes',
  markerBrushes: 'markerBrushes',
  outlines: 'outlines',
  markerOutlines: 'markerOutlines',
  width: 'width',
  height: 'height',
  size: 'size',
  dataSource: 'dataSource',
  dataSourceUrl: 'dataSourceUrl',
  dataSourceType: 'dataSourceType',
  responseDataKey: 'responseDataKey',
  isSurfaceInteractionDisabled: 'isSurfaceInteractionDisabled',
  animateSeriesWhenAxisRangeChanges: 'animateSeriesWhenAxisRangeChanges',
  title: 'title',
  subtitle: 'subtitle',
  titleTextStyle: 'titleTextStyle',
  titleTopMargin: 'titleTopMargin',
  titleLeftMargin: 'titleLeftMargin',
  titleRightMargin: 'titleRightMargin',
  titleBottomMargin: 'titleBottomMargin',
  subtitleTextStyle: 'subtitleTextStyle',
  subtitleTopMargin: 'subtitleTopMargin',
  subtitleLeftMargin: 'subtitleLeftMargin',
  subtitleRightMargin: 'subtitleRightMargin',
  subtitleBottomMargin: 'subtitleBottomMargin',
  titleTextColor: 'titleTextColor',
  subtitleTextColor: 'subtitleTextColor',
  titleHorizontalAlignment: 'titleHorizontalAlignment',
  subtitleHorizontalAlignment: 'subtitleHorizontalAlignment',
  highlightingTransitionDuration: 'highlightingTransitionDuration',
  useTiledZooming: 'useTiledZooming',
  preferHigherResolutionTiles: 'preferHigherResolutionTiles',
  pixelScalingRatio: 'pixelScalingRatio',
  zoomTileCacheSize: 'zoomTileCacheSize',
  contentHitTestMode: 'contentHitTestMode',
  legend: 'legend',
  axes: 'axes',
  series: 'series',
  theme: 'theme'
}
,{
  tooltipShowing: 'tooltipShowing',
  tooltipShown: 'tooltipShown',
  tooltipHiding: 'tooltipHiding',
  tooltipHidden: 'tooltipHidden',
  browserNotSupported: 'browserNotSupported',
  seriesCursorMouseMove: 'seriesCursorMouseMove',
  seriesMouseLeftButtonDown: 'seriesMouseLeftButtonDown',
  seriesMouseLeftButtonUp: 'seriesMouseLeftButtonUp',
  seriesMouseMove: 'seriesMouseMove',
  seriesMouseEnter: 'seriesMouseEnter',
  seriesMouseLeave: 'seriesMouseLeave',
  windowRectChanged: 'windowRectChanged',
  gridAreaRectChanged: 'gridAreaRectChanged',
  refreshCompleted: 'refreshCompleted',
  axisRangeChanged: 'axisRangeChanged',
  typicalBasedOn: 'typicalBasedOn',
  progressiveLoadStatusChanged: 'progressiveLoadStatusChanged',
  assigningCategoryStyle: 'assigningCategoryStyle',
  assigningCategoryMarkerStyle: 'assigningCategoryMarkerStyle'
}
,['*']);
const styles_IgPieChartComponent:any[] = ([] as any[]);
export const RenderType_IgPieChartComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgPieChartComponent,
  data: {}
}
);
export function View_IgPieChartComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgPieChartComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-pie-chart',([] as any[]),(null as any),(null as any),(null as any),View_IgPieChartComponent_0,RenderType_IgPieChartComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgPieChartComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgPieChartComponentNgFactory:import0.ComponentFactory<import1.IgPieChartComponent> = import0.ɵccf('ig-pie-chart',import1.IgPieChartComponent,View_IgPieChartComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  dataSource: 'dataSource',
  dataSourceUrl: 'dataSourceUrl',
  dataSourceType: 'dataSourceType',
  responseDataKey: 'responseDataKey',
  valueMemberPath: 'valueMemberPath',
  labelMemberPath: 'labelMemberPath',
  dataValue: 'dataValue',
  dataLabel: 'dataLabel',
  labelsPosition: 'labelsPosition',
  labelOuterColor: 'labelOuterColor',
  labelInnerColor: 'labelInnerColor',
  selectionMode: 'selectionMode',
  selectedItem: 'selectedItem',
  selectedItems: 'selectedItems',
  leaderLineVisibility: 'leaderLineVisibility',
  leaderLineType: 'leaderLineType',
  leaderLineMargin: 'leaderLineMargin',
  othersCategoryThreshold: 'othersCategoryThreshold',
  formatLabel: 'formatLabel',
  othersCategoryStyle: 'othersCategoryStyle',
  othersCategoryType: 'othersCategoryType',
  othersCategoryText: 'othersCategoryText',
  explodedRadius: 'explodedRadius',
  radiusFactor: 'radiusFactor',
  allowSliceSelection: 'allowSliceSelection',
  allowSliceExplosion: 'allowSliceExplosion',
  explodedSlices: 'explodedSlices',
  selectedSlices: 'selectedSlices',
  showTooltip: 'showTooltip',
  tooltipTemplate: 'tooltipTemplate',
  legend: 'legend',
  labelExtent: 'labelExtent',
  startAngle: 'startAngle',
  sweepDirection: 'sweepDirection',
  selectedStyle: 'selectedStyle',
  brushes: 'brushes',
  outlines: 'outlines',
  legendItemTemplate: 'legendItemTemplate',
  legendItemBadgeTemplate: 'legendItemBadgeTemplate',
  textStyle: 'textStyle',
  theme: 'theme'
}
,{
  tooltipShowing: 'tooltipShowing',
  tooltipShown: 'tooltipShown',
  tooltipHiding: 'tooltipHiding',
  tooltipHidden: 'tooltipHidden',
  browserNotSupported: 'browserNotSupported',
  sliceClick: 'sliceClick',
  labelClick: 'labelClick',
  selectedItemChanging: 'selectedItemChanging',
  selectedItemChanged: 'selectedItemChanged',
  selectedItemsChanging: 'selectedItemsChanging',
  selectedItemsChanged: 'selectedItemsChanged'
}
,['*']);
const styles_IgDoughnutChartComponent:any[] = ([] as any[]);
export const RenderType_IgDoughnutChartComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgDoughnutChartComponent,
  data: {}
}
);
export function View_IgDoughnutChartComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgDoughnutChartComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-doughnut-chart',([] as any[]),(null as any),(null as any),(null as any),View_IgDoughnutChartComponent_0,RenderType_IgDoughnutChartComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgDoughnutChartComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgDoughnutChartComponentNgFactory:import0.ComponentFactory<import1.IgDoughnutChartComponent> = import0.ɵccf('ig-doughnut-chart',import1.IgDoughnutChartComponent,View_IgDoughnutChartComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  tooltipTemplate: 'tooltipTemplate',
  maxRecCount: 'maxRecCount',
  dataSource: 'dataSource',
  dataSourceType: 'dataSourceType',
  dataSourceUrl: 'dataSourceUrl',
  responseTotalRecCountKey: 'responseTotalRecCountKey',
  responseDataKey: 'responseDataKey',
  series: 'series',
  allowSliceSelection: 'allowSliceSelection',
  isSurfaceInteractionDisabled: 'isSurfaceInteractionDisabled',
  allowSliceExplosion: 'allowSliceExplosion',
  innerExtent: 'innerExtent',
  selectedStyle: 'selectedStyle'
}
,{
  dataBinding: 'dataBinding',
  dataBound: 'dataBound',
  updateTooltip: 'updateTooltip',
  hideTooltip: 'hideTooltip',
  tooltipShowing: 'tooltipShowing',
  tooltipShown: 'tooltipShown',
  tooltipHiding: 'tooltipHiding',
  tooltipHidden: 'tooltipHidden',
  browserNotSupported: 'browserNotSupported',
  sliceClick: 'sliceClick',
  holeDimensionsChanged: 'holeDimensionsChanged'
}
,['*']);
const styles_IgFunnelChartComponent:any[] = ([] as any[]);
export const RenderType_IgFunnelChartComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgFunnelChartComponent,
  data: {}
}
);
export function View_IgFunnelChartComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgFunnelChartComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-funnel-chart',([] as any[]),(null as any),(null as any),(null as any),View_IgFunnelChartComponent_0,RenderType_IgFunnelChartComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgFunnelChartComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgFunnelChartComponentNgFactory:import0.ComponentFactory<import1.IgFunnelChartComponent> = import0.ɵccf('ig-funnel-chart',import1.IgFunnelChartComponent,View_IgFunnelChartComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  tooltipTemplate: 'tooltipTemplate',
  maxRecCount: 'maxRecCount',
  dataSource: 'dataSource',
  dataSourceType: 'dataSourceType',
  dataSourceUrl: 'dataSourceUrl',
  responseTotalRecCountKey: 'responseTotalRecCountKey',
  responseDataKey: 'responseDataKey',
  bezierPoints: 'bezierPoints',
  legend: 'legend',
  valueMemberPath: 'valueMemberPath',
  brushes: 'brushes',
  outlines: 'outlines',
  bottomEdgeWidth: 'bottomEdgeWidth',
  innerLabelMemberPath: 'innerLabelMemberPath',
  outerLabelMemberPath: 'outerLabelMemberPath',
  innerLabelVisibility: 'innerLabelVisibility',
  outerLabelVisibility: 'outerLabelVisibility',
  outerLabelAlignment: 'outerLabelAlignment',
  funnelSliceDisplay: 'funnelSliceDisplay',
  formatInnerLabel: 'formatInnerLabel',
  formatOuterLabel: 'formatOuterLabel',
  transitionDuration: 'transitionDuration',
  isInverted: 'isInverted',
  useBezierCurve: 'useBezierCurve',
  allowSliceSelection: 'allowSliceSelection',
  useUnselectedStyle: 'useUnselectedStyle',
  selectedSliceStyle: 'selectedSliceStyle',
  unselectedSliceStyle: 'unselectedSliceStyle',
  legendItemBadgeTemplate: 'legendItemBadgeTemplate',
  useOuterLabelsForLegend: 'useOuterLabelsForLegend',
  textStyle: 'textStyle',
  outerLabelTextStyle: 'outerLabelTextStyle',
  outlineThickness: 'outlineThickness',
  pixelScalingRatio: 'pixelScalingRatio',
  outerLabelTextColor: 'outerLabelTextColor',
  textColor: 'textColor'
}
,{
  dataBinding: 'dataBinding',
  dataBound: 'dataBound',
  updateTooltip: 'updateTooltip',
  hideTooltip: 'hideTooltip',
  sliceClicked: 'sliceClicked'
}
,['*']);
const styles_IgRadialGaugeComponent:any[] = ([] as any[]);
export const RenderType_IgRadialGaugeComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgRadialGaugeComponent,
  data: {}
}
);
export function View_IgRadialGaugeComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgRadialGaugeComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-radial-gauge',([] as any[]),(null as any),(null as any),(null as any),View_IgRadialGaugeComponent_0,RenderType_IgRadialGaugeComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgRadialGaugeComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgRadialGaugeComponentNgFactory:import0.ComponentFactory<import1.IgRadialGaugeComponent> = import0.ɵccf('ig-radial-gauge',import1.IgRadialGaugeComponent,View_IgRadialGaugeComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  ranges: 'ranges',
  rangeBrushes: 'rangeBrushes',
  rangeOutlines: 'rangeOutlines',
  minimumValue: 'minimumValue',
  maximumValue: 'maximumValue',
  interval: 'interval',
  centerX: 'centerX',
  centerY: 'centerY',
  value: 'value',
  scaleStartAngle: 'scaleStartAngle',
  scaleEndAngle: 'scaleEndAngle',
  scaleSweepDirection: 'scaleSweepDirection',
  transitionDuration: 'transitionDuration',
  transitionEasingFunction: 'transitionEasingFunction',
  needleBrush: 'needleBrush',
  needleOutline: 'needleOutline',
  needleStartExtent: 'needleStartExtent',
  needleEndExtent: 'needleEndExtent',
  needleShape: 'needleShape',
  needleStartWidthRatio: 'needleStartWidthRatio',
  needleEndWidthRatio: 'needleEndWidthRatio',
  needleBaseFeatureWidthRatio: 'needleBaseFeatureWidthRatio',
  needleBaseFeatureExtent: 'needleBaseFeatureExtent',
  needlePointFeatureWidthRatio: 'needlePointFeatureWidthRatio',
  needlePointFeatureExtent: 'needlePointFeatureExtent',
  needlePivotWidthRatio: 'needlePivotWidthRatio',
  needlePivotInnerWidthRatio: 'needlePivotInnerWidthRatio',
  needlePivotShape: 'needlePivotShape',
  scaleStartExtent: 'scaleStartExtent',
  needlePivotBrush: 'needlePivotBrush',
  needlePivotOutline: 'needlePivotOutline',
  needleStrokeThickness: 'needleStrokeThickness',
  needlePivotStrokeThickness: 'needlePivotStrokeThickness',
  scaleEndExtent: 'scaleEndExtent',
  labelExtent: 'labelExtent',
  labelInterval: 'labelInterval',
  tickStartExtent: 'tickStartExtent',
  tickEndExtent: 'tickEndExtent',
  tickStrokeThickness: 'tickStrokeThickness',
  tickBrush: 'tickBrush',
  fontBrush: 'fontBrush',
  minorTickStartExtent: 'minorTickStartExtent',
  minorTickEndExtent: 'minorTickEndExtent',
  minorTickStrokeThickness: 'minorTickStrokeThickness',
  minorTickBrush: 'minorTickBrush',
  minorTickCount: 'minorTickCount',
  scaleBrush: 'scaleBrush',
  backingBrush: 'backingBrush',
  backingOutline: 'backingOutline',
  backingStrokeThickness: 'backingStrokeThickness',
  backingOuterExtent: 'backingOuterExtent',
  backingOversweep: 'backingOversweep',
  scaleOversweep: 'scaleOversweep',
  scaleOversweepShape: 'scaleOversweepShape',
  backingCornerRadius: 'backingCornerRadius',
  backingInnerExtent: 'backingInnerExtent',
  backingShape: 'backingShape',
  radiusMultiplier: 'radiusMultiplier',
  duplicateLabelOmissionStrategy: 'duplicateLabelOmissionStrategy',
  isNeedleDraggingEnabled: 'isNeedleDraggingEnabled',
  isNeedleDraggingConstrained: 'isNeedleDraggingConstrained',
  font: 'font',
  transitionProgress: 'transitionProgress',
  pixelScalingRatio: 'pixelScalingRatio'
}
,{
  formatLabel: 'formatLabel',
  alignLabel: 'alignLabel',
  valueChanged: 'valueChanged'
}
,['*']);
const styles_IgZoombarComponent:any[] = ([] as any[]);
export const RenderType_IgZoombarComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgZoombarComponent,
  data: {}
}
);
export function View_IgZoombarComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgZoombarComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-zoombar',([] as any[]),(null as any),(null as any),(null as any),View_IgZoombarComponent_0,RenderType_IgZoombarComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgZoombarComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgZoombarComponentNgFactory:import0.ComponentFactory<import1.IgZoombarComponent> = import0.ɵccf('ig-zoombar',import1.IgZoombarComponent,View_IgZoombarComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  target: 'target',
  clone: 'clone',
  width: 'width',
  height: 'height',
  zoomAction: 'zoomAction',
  zoomWindowMoveDistance: 'zoomWindowMoveDistance',
  defaultZoomWindow: 'defaultZoomWindow',
  zoomWindowMinWidth: 'zoomWindowMinWidth',
  hoverStyleAnimationDuration: 'hoverStyleAnimationDuration',
  windowPanDuration: 'windowPanDuration',
  tabIndex: 'tabIndex'
}
,{
  zoomChanging: 'zoomChanging',
  zoomChanged: 'zoomChanged',
  providerCreated: 'providerCreated',
  windowDragStarting: 'windowDragStarting',
  windowDragStarted: 'windowDragStarted',
  windowDragging: 'windowDragging',
  windowDragEnding: 'windowDragEnding',
  windowDragEnded: 'windowDragEnded',
  windowResizing: 'windowResizing',
  windowResized: 'windowResized'
}
,['*']);
const styles_IgMapComponent:any[] = ([] as any[]);
export const RenderType_IgMapComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgMapComponent,
  data: {}
}
);
export function View_IgMapComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgMapComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-map',([] as any[]),(null as any),(null as any),(null as any),View_IgMapComponent_0,RenderType_IgMapComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgMapComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgMapComponentNgFactory:import0.ComponentFactory<import1.IgMapComponent> = import0.ɵccf('ig-map',import1.IgMapComponent,View_IgMapComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  dataSource: 'dataSource',
  dataSourceUrl: 'dataSourceUrl',
  dataSourceType: 'dataSourceType',
  responseDataKey: 'responseDataKey',
  autoMarginWidth: 'autoMarginWidth',
  autoMarginHeight: 'autoMarginHeight',
  crosshairVisibility: 'crosshairVisibility',
  crosshairPoint: 'crosshairPoint',
  plotAreaBackground: 'plotAreaBackground',
  defaultInteraction: 'defaultInteraction',
  dragModifier: 'dragModifier',
  panModifier: 'panModifier',
  previewRect: 'previewRect',
  windowRect: 'windowRect',
  zoomable: 'zoomable',
  windowScale: 'windowScale',
  windowResponse: 'windowResponse',
  windowRectMinWidth: 'windowRectMinWidth',
  windowPositionHorizontal: 'windowPositionHorizontal',
  windowPositionVertical: 'windowPositionVertical',
  circleMarkerTemplate: 'circleMarkerTemplate',
  triangleMarkerTemplate: 'triangleMarkerTemplate',
  pyramidMarkerTemplate: 'pyramidMarkerTemplate',
  squareMarkerTemplate: 'squareMarkerTemplate',
  diamondMarkerTemplate: 'diamondMarkerTemplate',
  pentagonMarkerTemplate: 'pentagonMarkerTemplate',
  hexagonMarkerTemplate: 'hexagonMarkerTemplate',
  tetragramMarkerTemplate: 'tetragramMarkerTemplate',
  pentagramMarkerTemplate: 'pentagramMarkerTemplate',
  hexagramMarkerTemplate: 'hexagramMarkerTemplate',
  overviewPlusDetailPaneBackgroundImageUri: 'overviewPlusDetailPaneBackgroundImageUri',
  useTiledZooming: 'useTiledZooming',
  preferHigherResolutionTiles: 'preferHigherResolutionTiles',
  zoomTileCacheSize: 'zoomTileCacheSize',
  backgroundContent: 'backgroundContent',
  series: 'series',
  theme: 'theme'
}
,{
  tooltipShowing: 'tooltipShowing',
  tooltipShown: 'tooltipShown',
  tooltipHiding: 'tooltipHiding',
  tooltipHidden: 'tooltipHidden',
  browserNotSupported: 'browserNotSupported',
  seriesCursorMouseMove: 'seriesCursorMouseMove',
  seriesMouseLeftButtonDown: 'seriesMouseLeftButtonDown',
  seriesMouseLeftButtonUp: 'seriesMouseLeftButtonUp',
  seriesMouseMove: 'seriesMouseMove',
  seriesMouseEnter: 'seriesMouseEnter',
  seriesMouseLeave: 'seriesMouseLeave',
  windowRectChanged: 'windowRectChanged',
  gridAreaRectChanged: 'gridAreaRectChanged',
  refreshCompleted: 'refreshCompleted',
  triangulationStatusChanged: 'triangulationStatusChanged'
}
,['*']);
const styles_IgSparklineComponent:any[] = ([] as any[]);
export const RenderType_IgSparklineComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgSparklineComponent,
  data: {}
}
);
export function View_IgSparklineComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgSparklineComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-sparkline',([] as any[]),(null as any),(null as any),(null as any),View_IgSparklineComponent_0,RenderType_IgSparklineComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgSparklineComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgSparklineComponentNgFactory:import0.ComponentFactory<import1.IgSparklineComponent> = import0.ɵccf('ig-sparkline',import1.IgSparklineComponent,View_IgSparklineComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  tooltipTemplate: 'tooltipTemplate',
  maxRecCount: 'maxRecCount',
  dataSource: 'dataSource',
  dataSourceType: 'dataSourceType',
  dataSourceUrl: 'dataSourceUrl',
  responseTotalRecCountKey: 'responseTotalRecCountKey',
  responseDataKey: 'responseDataKey',
  brush: 'brush',
  negativeBrush: 'negativeBrush',
  markerBrush: 'markerBrush',
  negativeMarkerBrush: 'negativeMarkerBrush',
  firstMarkerBrush: 'firstMarkerBrush',
  lastMarkerBrush: 'lastMarkerBrush',
  highMarkerBrush: 'highMarkerBrush',
  lowMarkerBrush: 'lowMarkerBrush',
  trendLineBrush: 'trendLineBrush',
  horizontalAxisBrush: 'horizontalAxisBrush',
  verticalAxisBrush: 'verticalAxisBrush',
  normalRangeFill: 'normalRangeFill',
  horizontalAxisVisibility: 'horizontalAxisVisibility',
  verticalAxisVisibility: 'verticalAxisVisibility',
  markerVisibility: 'markerVisibility',
  negativeMarkerVisibility: 'negativeMarkerVisibility',
  firstMarkerVisibility: 'firstMarkerVisibility',
  lastMarkerVisibility: 'lastMarkerVisibility',
  lowMarkerVisibility: 'lowMarkerVisibility',
  highMarkerVisibility: 'highMarkerVisibility',
  normalRangeVisibility: 'normalRangeVisibility',
  displayNormalRangeInFront: 'displayNormalRangeInFront',
  markerSize: 'markerSize',
  firstMarkerSize: 'firstMarkerSize',
  lastMarkerSize: 'lastMarkerSize',
  highMarkerSize: 'highMarkerSize',
  lowMarkerSize: 'lowMarkerSize',
  negativeMarkerSize: 'negativeMarkerSize',
  lineThickness: 'lineThickness',
  valueMemberPath: 'valueMemberPath',
  labelMemberPath: 'labelMemberPath',
  trendLineType: 'trendLineType',
  trendLinePeriod: 'trendLinePeriod',
  trendLineThickness: 'trendLineThickness',
  normalRangeMinimum: 'normalRangeMinimum',
  normalRangeMaximum: 'normalRangeMaximum',
  displayType: 'displayType',
  unknownValuePlotting: 'unknownValuePlotting',
  verticalAxisLabel: 'verticalAxisLabel',
  horizontalAxisLabel: 'horizontalAxisLabel',
  formatLabel: 'formatLabel',
  pixelScalingRatio: 'pixelScalingRatio'
}
,{
  dataBinding: 'dataBinding',
  dataBound: 'dataBound',
  updateTooltip: 'updateTooltip',
  hideTooltip: 'hideTooltip'
}
,['*']);
const styles_IgBulletGraphComponent:any[] = ([] as any[]);
export const RenderType_IgBulletGraphComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgBulletGraphComponent,
  data: {}
}
);
export function View_IgBulletGraphComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgBulletGraphComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-bullet-graph',([] as any[]),(null as any),(null as any),(null as any),View_IgBulletGraphComponent_0,RenderType_IgBulletGraphComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgBulletGraphComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgBulletGraphComponentNgFactory:import0.ComponentFactory<import1.IgBulletGraphComponent> = import0.ɵccf('ig-bullet-graph',import1.IgBulletGraphComponent,View_IgBulletGraphComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  ranges: 'ranges',
  rangeToolTipTemplate: 'rangeToolTipTemplate',
  valueToolTipTemplate: 'valueToolTipTemplate',
  targetValueToolTipTemplate: 'targetValueToolTipTemplate',
  orientation: 'orientation',
  rangeBrushes: 'rangeBrushes',
  rangeOutlines: 'rangeOutlines',
  minimumValue: 'minimumValue',
  maximumValue: 'maximumValue',
  targetValue: 'targetValue',
  targetValueName: 'targetValueName',
  value: 'value',
  valueName: 'valueName',
  rangeInnerExtent: 'rangeInnerExtent',
  rangeOuterExtent: 'rangeOuterExtent',
  valueInnerExtent: 'valueInnerExtent',
  valueOuterExtent: 'valueOuterExtent',
  interval: 'interval',
  ticksPostInitial: 'ticksPostInitial',
  ticksPreTerminal: 'ticksPreTerminal',
  labelInterval: 'labelInterval',
  labelExtent: 'labelExtent',
  labelsPostInitial: 'labelsPostInitial',
  labelsPreTerminal: 'labelsPreTerminal',
  minorTickCount: 'minorTickCount',
  tickStartExtent: 'tickStartExtent',
  tickEndExtent: 'tickEndExtent',
  tickStrokeThickness: 'tickStrokeThickness',
  tickBrush: 'tickBrush',
  fontBrush: 'fontBrush',
  valueBrush: 'valueBrush',
  valueOutline: 'valueOutline',
  valueStrokeThickness: 'valueStrokeThickness',
  minorTickStartExtent: 'minorTickStartExtent',
  minorTickEndExtent: 'minorTickEndExtent',
  minorTickStrokeThickness: 'minorTickStrokeThickness',
  minorTickBrush: 'minorTickBrush',
  isScaleInverted: 'isScaleInverted',
  backingBrush: 'backingBrush',
  backingOutline: 'backingOutline',
  backingStrokeThickness: 'backingStrokeThickness',
  backingInnerExtent: 'backingInnerExtent',
  backingOuterExtent: 'backingOuterExtent',
  scaleStartExtent: 'scaleStartExtent',
  scaleEndExtent: 'scaleEndExtent',
  targetValueBrush: 'targetValueBrush',
  targetValueBreadth: 'targetValueBreadth',
  targetValueInnerExtent: 'targetValueInnerExtent',
  targetValueOuterExtent: 'targetValueOuterExtent',
  targetValueOutline: 'targetValueOutline',
  targetValueStrokeThickness: 'targetValueStrokeThickness',
  transitionDuration: 'transitionDuration',
  showToolTipTimeout: 'showToolTipTimeout',
  showToolTip: 'showToolTip',
  font: 'font',
  pixelScalingRatio: 'pixelScalingRatio'
}
,{
  formatLabel: 'formatLabel',
  alignLabel: 'alignLabel'
}
,['*']);
const styles_IgLinearGaugeComponent:any[] = ([] as any[]);
export const RenderType_IgLinearGaugeComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgLinearGaugeComponent,
  data: {}
}
);
export function View_IgLinearGaugeComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgLinearGaugeComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-linear-gauge',([] as any[]),(null as any),(null as any),(null as any),View_IgLinearGaugeComponent_0,RenderType_IgLinearGaugeComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgLinearGaugeComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgLinearGaugeComponentNgFactory:import0.ComponentFactory<import1.IgLinearGaugeComponent> = import0.ɵccf('ig-linear-gauge',import1.IgLinearGaugeComponent,View_IgLinearGaugeComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  ranges: 'ranges',
  rangeToolTipTemplate: 'rangeToolTipTemplate',
  needleToolTipTemplate: 'needleToolTipTemplate',
  orientation: 'orientation',
  rangeBrushes: 'rangeBrushes',
  rangeOutlines: 'rangeOutlines',
  minimumValue: 'minimumValue',
  maximumValue: 'maximumValue',
  value: 'value',
  needleShape: 'needleShape',
  needleName: 'needleName',
  rangeInnerExtent: 'rangeInnerExtent',
  scaleInnerExtent: 'scaleInnerExtent',
  rangeOuterExtent: 'rangeOuterExtent',
  scaleOuterExtent: 'scaleOuterExtent',
  needleInnerExtent: 'needleInnerExtent',
  needleOuterExtent: 'needleOuterExtent',
  needleInnerBaseWidth: 'needleInnerBaseWidth',
  needleOuterBaseWidth: 'needleOuterBaseWidth',
  needleInnerPointWidth: 'needleInnerPointWidth',
  needleOuterPointWidth: 'needleOuterPointWidth',
  needleInnerPointExtent: 'needleInnerPointExtent',
  needleOuterPointExtent: 'needleOuterPointExtent',
  interval: 'interval',
  ticksPostInitial: 'ticksPostInitial',
  ticksPreTerminal: 'ticksPreTerminal',
  labelInterval: 'labelInterval',
  labelExtent: 'labelExtent',
  labelsPostInitial: 'labelsPostInitial',
  labelsPreTerminal: 'labelsPreTerminal',
  minorTickCount: 'minorTickCount',
  tickStartExtent: 'tickStartExtent',
  tickEndExtent: 'tickEndExtent',
  tickStrokeThickness: 'tickStrokeThickness',
  tickBrush: 'tickBrush',
  fontBrush: 'fontBrush',
  needleBreadth: 'needleBreadth',
  needleBrush: 'needleBrush',
  needleOutline: 'needleOutline',
  needleStrokeThickness: 'needleStrokeThickness',
  minorTickStartExtent: 'minorTickStartExtent',
  minorTickEndExtent: 'minorTickEndExtent',
  minorTickStrokeThickness: 'minorTickStrokeThickness',
  minorTickBrush: 'minorTickBrush',
  isScaleInverted: 'isScaleInverted',
  backingBrush: 'backingBrush',
  backingOutline: 'backingOutline',
  backingStrokeThickness: 'backingStrokeThickness',
  backingInnerExtent: 'backingInnerExtent',
  backingOuterExtent: 'backingOuterExtent',
  scaleStartExtent: 'scaleStartExtent',
  scaleEndExtent: 'scaleEndExtent',
  scaleBrush: 'scaleBrush',
  scaleOutline: 'scaleOutline',
  scaleStrokeThickness: 'scaleStrokeThickness',
  isNeedleDraggingEnabled: 'isNeedleDraggingEnabled',
  transitionDuration: 'transitionDuration',
  showToolTipTimeout: 'showToolTipTimeout',
  showToolTip: 'showToolTip',
  font: 'font',
  pixelScalingRatio: 'pixelScalingRatio'
}
,{
  formatLabel: 'formatLabel',
  alignLabel: 'alignLabel',
  valueChanged: 'valueChanged'
}
,['*']);
const styles_IgQRCodeBarcodeComponent:any[] = ([] as any[]);
export const RenderType_IgQRCodeBarcodeComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgQRCodeBarcodeComponent,
  data: {}
}
);
export function View_IgQRCodeBarcodeComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgQRCodeBarcodeComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-q-r-code-barcode',([] as any[]),(null as any),(null as any),(null as any),View_IgQRCodeBarcodeComponent_0,RenderType_IgQRCodeBarcodeComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgQRCodeBarcodeComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgQRCodeBarcodeComponentNgFactory:import0.ComponentFactory<import1.IgQRCodeBarcodeComponent> = import0.ɵccf('ig-q-r-code-barcode',import1.IgQRCodeBarcodeComponent,View_IgQRCodeBarcodeComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  backingBrush: 'backingBrush',
  backingOutline: 'backingOutline',
  backingStrokeThickness: 'backingStrokeThickness',
  barBrush: 'barBrush',
  fontBrush: 'fontBrush',
  font: 'font',
  data: 'data',
  errorMessageText: 'errorMessageText',
  stretch: 'stretch',
  barsFillMode: 'barsFillMode',
  widthToHeightRatio: 'widthToHeightRatio',
  xDimension: 'xDimension',
  errorCorrectionLevel: 'errorCorrectionLevel',
  sizeVersion: 'sizeVersion',
  encodingMode: 'encodingMode',
  eciNumber: 'eciNumber',
  eciHeaderDisplayMode: 'eciHeaderDisplayMode',
  fnc1Mode: 'fnc1Mode',
  applicationIndicator: 'applicationIndicator'
}
,{
  errorMessageDisplaying: 'errorMessageDisplaying',
  dataChanged: 'dataChanged'
}
,['*']);
const styles_IgUploadComponent:any[] = ([] as any[]);
export const RenderType_IgUploadComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgUploadComponent,
  data: {}
}
);
export function View_IgUploadComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgUploadComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-upload',([] as any[]),(null as any),(null as any),(null as any),View_IgUploadComponent_0,RenderType_IgUploadComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgUploadComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgUploadComponentNgFactory:import0.ComponentFactory<import1.IgUploadComponent> = import0.ɵccf('ig-upload',import1.IgUploadComponent,View_IgUploadComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  width: 'width',
  height: 'height',
  autostartupload: 'autostartupload',
  labelUploadButton: 'labelUploadButton',
  labelAddButton: 'labelAddButton',
  labelClearAllButton: 'labelClearAllButton',
  labelSummaryTemplate: 'labelSummaryTemplate',
  labelSummaryProgressBarTemplate: 'labelSummaryProgressBarTemplate',
  labelShowDetails: 'labelShowDetails',
  labelHideDetails: 'labelHideDetails',
  labelSummaryProgressButtonCancel: 'labelSummaryProgressButtonCancel',
  labelSummaryProgressButtonContinue: 'labelSummaryProgressButtonContinue',
  labelSummaryProgressButtonDone: 'labelSummaryProgressButtonDone',
  labelProgressBarFileNameContinue: 'labelProgressBarFileNameContinue',
  errorMessageMaxFileSizeExceeded: 'errorMessageMaxFileSizeExceeded',
  errorMessageGetFileStatus: 'errorMessageGetFileStatus',
  errorMessageCancelUpload: 'errorMessageCancelUpload',
  errorMessageNoSuchFile: 'errorMessageNoSuchFile',
  errorMessageOther: 'errorMessageOther',
  errorMessageValidatingFileExtension: 'errorMessageValidatingFileExtension',
  errorMessageAJAXRequestFileSize: 'errorMessageAJAXRequestFileSize',
  errorMessageTryToRemoveNonExistingFile: 'errorMessageTryToRemoveNonExistingFile',
  errorMessageTryToStartNonExistingFile: 'errorMessageTryToStartNonExistingFile',
  errorMessageMaxUploadedFiles: 'errorMessageMaxUploadedFiles',
  errorMessageMaxSimultaneousFiles: 'errorMessageMaxSimultaneousFiles',
  errorMessageDropMultipleFilesWhenSingleModel: 'errorMessageDropMultipleFilesWhenSingleModel',
  uploadUrl: 'uploadUrl',
  progressUrl: 'progressUrl',
  allowedExtensions: 'allowedExtensions',
  showFileExtensionIcon: 'showFileExtensionIcon',
  css: 'css',
  fileExtensionIcons: 'fileExtensionIcons',
  mode: 'mode',
  multipleFiles: 'multipleFiles',
  maxUploadedFiles: 'maxUploadedFiles',
  maxSimultaneousFilesUploads: 'maxSimultaneousFilesUploads',
  fileSizeMetric: 'fileSizeMetric',
  controlId: 'controlId',
  fileSizeDecimalDisplay: 'fileSizeDecimalDisplay',
  maxFileSize: 'maxFileSize'
}
,{
  fileSelecting: 'fileSelecting',
  fileSelected: 'fileSelected',
  fileUploading: 'fileUploading',
  fileUploaded: 'fileUploaded',
  fileUploadAborted: 'fileUploadAborted',
  cancelAllClicked: 'cancelAllClicked',
  onError: 'onError',
  fileExtensionsValidating: 'fileExtensionsValidating',
  onXHRLoad: 'onXHRLoad',
  onFormDataSubmit: 'onFormDataSubmit'
}
,['*']);
const styles_IgPopoverComponent:any[] = ([] as any[]);
export const RenderType_IgPopoverComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgPopoverComponent,
  data: {}
}
);
export function View_IgPopoverComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgPopoverComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-popover',([] as any[]),(null as any),(null as any),(null as any),View_IgPopoverComponent_0,RenderType_IgPopoverComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgPopoverComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgPopoverComponentNgFactory:import0.ComponentFactory<import1.IgPopoverComponent> = import0.ɵccf('ig-popover',import1.IgPopoverComponent,View_IgPopoverComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  closeOnBlur: 'closeOnBlur',
  direction: 'direction',
  position: 'position',
  width: 'width',
  height: 'height',
  minWidth: 'minWidth',
  maxWidth: 'maxWidth',
  maxHeight: 'maxHeight',
  animationDuration: 'animationDuration',
  contentTemplate: 'contentTemplate',
  selectors: 'selectors',
  headerTemplate: 'headerTemplate',
  showOn: 'showOn',
  containment: 'containment',
  appendTo: 'appendTo'
}
,{
  showing: 'showing',
  shown: 'shown',
  hiding: 'hiding',
  hidden: 'hidden'
}
,['*']);
const styles_IgNotifierComponent:any[] = ([] as any[]);
export const RenderType_IgNotifierComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgNotifierComponent,
  data: {}
}
);
export function View_IgNotifierComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgNotifierComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-notifier',([] as any[]),(null as any),(null as any),(null as any),View_IgNotifierComponent_0,RenderType_IgNotifierComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgNotifierComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgNotifierComponentNgFactory:import0.ComponentFactory<import1.IgNotifierComponent> = import0.ɵccf('ig-notifier',import1.IgNotifierComponent,View_IgNotifierComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  closeOnBlur: 'closeOnBlur',
  direction: 'direction',
  position: 'position',
  width: 'width',
  height: 'height',
  minWidth: 'minWidth',
  maxWidth: 'maxWidth',
  maxHeight: 'maxHeight',
  animationDuration: 'animationDuration',
  contentTemplate: 'contentTemplate',
  selectors: 'selectors',
  headerTemplate: 'headerTemplate',
  showOn: 'showOn',
  containment: 'containment',
  appendTo: 'appendTo',
  state: 'state',
  notifyLevel: 'notifyLevel',
  mode: 'mode',
  allowCSSOnTarget: 'allowCSSOnTarget',
  messages: 'messages',
  showIcon: 'showIcon',
  animationSlideDistance: 'animationSlideDistance'
}
,{
  showing: 'showing',
  shown: 'shown',
  hiding: 'hiding',
  hidden: 'hidden'
}
,['*']);
const styles_IgRatingComponent:any[] = ([] as any[]);
export const RenderType_IgRatingComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgRatingComponent,
  data: {}
}
);
export function View_IgRatingComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgRatingComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-rating',([] as any[]),(null as any),(null as any),(null as any),View_IgRatingComponent_0,RenderType_IgRatingComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgRatingComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgRatingComponentNgFactory:import0.ComponentFactory<import1.IgRatingComponent> = import0.ɵccf('ig-rating',import1.IgRatingComponent,View_IgRatingComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  vertical: 'vertical',
  value: 'value',
  valueHover: 'valueHover',
  voteCount: 'voteCount',
  voteWidth: 'voteWidth',
  voteHeight: 'voteHeight',
  swapDirection: 'swapDirection',
  valueAsPercent: 'valueAsPercent',
  focusable: 'focusable',
  precision: 'precision',
  precisionZeroVote: 'precisionZeroVote',
  roundedDecimalPlaces: 'roundedDecimalPlaces',
  theme: 'theme',
  validatorOptions: 'validatorOptions',
  cssVotes: 'cssVotes'
}
,{
  hoverChange: 'hoverChange',
  valueChange: 'valueChange'
}
,['*']);
const styles_IgVideoPlayerComponent:any[] = ([] as any[]);
export const RenderType_IgVideoPlayerComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgVideoPlayerComponent,
  data: {}
}
);
export function View_IgVideoPlayerComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgVideoPlayerComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-video-player',([] as any[]),(null as any),(null as any),(null as any),View_IgVideoPlayerComponent_0,RenderType_IgVideoPlayerComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgVideoPlayerComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgVideoPlayerComponentNgFactory:import0.ComponentFactory<import1.IgVideoPlayerComponent> = import0.ɵccf('ig-video-player',import1.IgVideoPlayerComponent,View_IgVideoPlayerComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  sources: 'sources',
  width: 'width',
  height: 'height',
  posterUrl: 'posterUrl',
  preload: 'preload',
  autoplay: 'autoplay',
  autohide: 'autohide',
  volumeAutohideDelay: 'volumeAutohideDelay',
  centerButtonHideDelay: 'centerButtonHideDelay',
  loop: 'loop',
  browserControls: 'browserControls',
  fullscreen: 'fullscreen',
  volume: 'volume',
  muted: 'muted',
  title: 'title',
  showSeekTime: 'showSeekTime',
  progressLabelFormat: 'progressLabelFormat',
  bookmarks: 'bookmarks',
  relatedVideos: 'relatedVideos',
  banners: 'banners',
  commercials: 'commercials'
}
,{
  ended: 'ended',
  playing: 'playing',
  paused: 'paused',
  buffering: 'buffering',
  progress: 'progress',
  waiting: 'waiting',
  bookmarkHit: 'bookmarkHit',
  bookmarkClick: 'bookmarkClick',
  enterFullScreen: 'enterFullScreen',
  exitFullScreen: 'exitFullScreen',
  relatedVideoClick: 'relatedVideoClick',
  bannerVisible: 'bannerVisible',
  bannerHidden: 'bannerHidden',
  bannerClick: 'bannerClick',
  browserNotSupported: 'browserNotSupported'
}
,['*']);
const styles_IgRadialMenuComponent:any[] = ([] as any[]);
export const RenderType_IgRadialMenuComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgRadialMenuComponent,
  data: {}
}
);
export function View_IgRadialMenuComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgRadialMenuComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-radial-menu',([] as any[]),(null as any),(null as any),(null as any),View_IgRadialMenuComponent_0,RenderType_IgRadialMenuComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgRadialMenuComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgRadialMenuComponentNgFactory:import0.ComponentFactory<import1.IgRadialMenuComponent> = import0.ɵccf('ig-radial-menu',import1.IgRadialMenuComponent,View_IgRadialMenuComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  items: 'items',
  currentOpenMenuItemName: 'currentOpenMenuItemName',
  centerButtonContentWidth: 'centerButtonContentWidth',
  centerButtonContentHeight: 'centerButtonContentHeight',
  centerButtonClosedFill: 'centerButtonClosedFill',
  centerButtonClosedStroke: 'centerButtonClosedStroke',
  centerButtonFill: 'centerButtonFill',
  centerButtonHotTrackFill: 'centerButtonHotTrackFill',
  centerButtonHotTrackStroke: 'centerButtonHotTrackStroke',
  centerButtonStroke: 'centerButtonStroke',
  centerButtonStrokeThickness: 'centerButtonStrokeThickness',
  font: 'font',
  isOpen: 'isOpen',
  menuBackground: 'menuBackground',
  menuItemOpenCloseAnimationDuration: 'menuItemOpenCloseAnimationDuration',
  menuItemOpenCloseAnimationEasingFunction: 'menuItemOpenCloseAnimationEasingFunction',
  menuOpenCloseAnimationDuration: 'menuOpenCloseAnimationDuration',
  menuOpenCloseAnimationEasingFunction: 'menuOpenCloseAnimationEasingFunction',
  minWedgeCount: 'minWedgeCount',
  outerRingFill: 'outerRingFill',
  outerRingThickness: 'outerRingThickness',
  outerRingStroke: 'outerRingStroke',
  outerRingStrokeThickness: 'outerRingStrokeThickness',
  rotationInDegrees: 'rotationInDegrees',
  rotationAsPercentageOfWedge: 'rotationAsPercentageOfWedge',
  wedgePaddingInDegrees: 'wedgePaddingInDegrees',
  pixelScalingRatio: 'pixelScalingRatio'
}
,{
  formatLabel: 'formatLabel',
  alignLabel: 'alignLabel',
  valueChanged: 'valueChanged'
}
,['*']);
const styles_IgSplitButtonComponent:any[] = ([] as any[]);
export const RenderType_IgSplitButtonComponent:import0.RendererType2 = import0.ɵcrt({
  encapsulation: 2,
  styles: styles_IgSplitButtonComponent,
  data: {}
}
);
export function View_IgSplitButtonComponent_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[import0.ɵncd((null as any),0)],(null as any),(null as any));
}
function View_IgSplitButtonComponent_Host_0(l:any):import0.ɵViewDefinition {
  return import0.ɵvid(0,[
    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'ig-split-button',([] as any[]),(null as any),(null as any),(null as any),View_IgSplitButtonComponent_0,RenderType_IgSplitButtonComponent)),
    import0.ɵdid(188416,(null as any),0,import1.IgSplitButtonComponent,[
      import0.ElementRef,
      import0.Renderer,
      import0.IterableDiffers
    ]
    ,(null as any),(null as any))
  ]
  ,(ck,v) => {
    ck(v,1,0);
  },(null as any));
}
export const IgSplitButtonComponentNgFactory:import0.ComponentFactory<import1.IgSplitButtonComponent> = import0.ɵccf('ig-split-button',import1.IgSplitButtonComponent,View_IgSplitButtonComponent_Host_0,{
  widgetId: 'widgetId',
  options: 'options',
  changeDetectionInterval: 'changeDetectionInterval',
  disabled: 'disabled',
  create: 'create',
  items: 'items',
  defaultItemName: 'defaultItemName',
  swapDefaultEnabled: 'swapDefaultEnabled'
}
,{
  click: 'click',
  expanded: 'expanded',
  expanding: 'expanding',
  collapsed: 'collapsed',
  collapsing: 'collapsing'
}
,['*']);
//# sourceMappingURL=data:application/json;base64,
